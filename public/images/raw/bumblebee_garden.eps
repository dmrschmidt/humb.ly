%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 13.0.0
%%For: (user) ()
%%Title: (bee_in_garden.eps)
%%CreationDate: 8/11/2008 3:12 AM
%%BoundingBox: 0 0 600 600
%%HiResBoundingBox: 0 0 600 600
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 300.5 299.5 300.5 299.5
%AI3_TileBox: 2.3999 -120.8701 597.4199 720.9902
%AI3_DocumentPreview: Header
%AI5_ArtSize: 600 600
%AI5_RulerUnits: 6
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 1
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -691 909 0.5 1245 697 26 0 0 0 73 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 128 128 8
%%BeginData: 29371 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD80FFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFF
%A9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FF
%AFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFF
%A9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FF
%AFFFA9FFAFFFA9FFAFFFA9FFAFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFF
%FFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAF
%FFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFF
%FFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAF
%FFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFAFFFA9FFAFFFA9FF
%AFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFF
%A9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FF
%AFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFF
%A9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FD
%81FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FF
%AFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFF
%A9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FF
%AFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFF
%A9FFAFFFA9FFAFFFA9FD04FFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFF
%FFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFF
%AFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFF
%FFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFF
%AFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFA9FFAFFFA9FFAFFFA9FFAFFFA9
%FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAF
%FFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9
%FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAF
%FFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFD81FFA9FFAF
%FFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9
%FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAF
%FFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9
%FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAF
%FFA9FFAFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFF
%AFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFF
%FFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFF
%AFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFF
%FFFFAFFFFFFFAFFFFFFFAFFFFFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAF
%FFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9
%FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAF
%FFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9
%FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FD34FFAFA87DAEFD49FF
%AFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFF
%A9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFF7D4B262626517DFFAFFF
%AFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFF
%A9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FF
%AFFFA9FFAFFFA9FD04FFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFF
%AFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFF7D27264B
%2627262751A8FD04FFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAF
%FFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFF
%FFAFFFFFFFAFFFFFFFAFFFFFFFAFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFF
%A9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FF
%AFFFFF76F826262726262026267DAFFFAFFFA9FFAFFFA9FFAFFFA9FFFFFF
%A8FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FF
%AFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFD32FFA74B264B2627
%264B2627267DFD0AFFAFFFFFA74B4B4BA8FD31FFA9FFAFFFA9FFAFFFA9FF
%AFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFF
%A9FFAFFFA9FFAFFFA9FFA85226272627FD0426207CFFFFA9FFAFFFA9FFAF
%FFAF7CFD042652FFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FF
%AFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFFFAFFFFF
%FFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAF
%FFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFFD04A87C522626267DFFFF
%AFFFFFFFAFFFFF7C204B262627FFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFF
%FFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFF
%AFFFFFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA8FFA9FFA8FFA9FFA8FFA9FFA8
%FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAF
%FFA9A8272626A8FFFFA9FFAFFFAF7D202620264BAFA9FFAFFFA9FFAFFFA9
%FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAF
%FFA9FFAFFFA9FFAFFFA9FD0EFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FD13FFAFFD0BFF51274BFD06FFAE2627264B7CFD34FFAFFFA9FFAFFFA9FF
%AFFFA9AFA9AFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9AFA8FFAFFFA9FFAFFF
%A9FFAFFFA9FFAFFFA9FFAFFFAFFD0BFF262651FFA8FFAFFF2726265183FF
%AFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFF
%A9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FD04FFAFFFFFFFAFFF
%AFAFA9FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFFFFF
%AFFFFFFFAFFD0FFFCFCF764B2627264B26514B27267CFFFFAFFFFFFFAFFF
%FFFFAFFFFFFFAFFFAFFFAFFFAFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFF
%AFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFA9FFAFFFA9FFAFFFA8AFA9AFA8
%FFA9AFA8FFA9AFA8FFA9AFA8FFA9AFA8FFA9AFA8FFA9FFA8FFAFFFA9FFAF
%FFA9FD0BFFCACEC7C6C0C69E512026262620FD0426A0A8FFA9FFAFFFA9FF
%AFFFA9FFA9AFA8FFA9AFA8FFA9AFA8AFA9FFA9FFAFFFA9FFAFFFA9FFAFFF
%A9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFD08FFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFD11FFC8C7C6C7C6C7C6C7
%C69F2627264B262751C7C6C7C8CFFD06FFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFAFAFFD1CFFA9FFAFFFA9FFAFAFA8AFA9AFA8FFA9FFA8FFA9FFA8FFA9
%FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFAFFFA9FFAFFD09FFCFCEC6C6C0C6C6
%C6C0FD04C6752626204B7AFD05C6C0C8CAFFA9FFAFAFA8FFA9FFA8FFA9FF
%A8FFA9FFA8AFA9AFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FF
%AFFFA9FFAFFFFFAFFFFFFFAFFFAFAFA9FFAFAFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFD0BFFCEC7C6C7C6C7C6C7C6C7C6
%C7C6C6C65126519EC7C6C7C6C7C6C6C0C7C9FFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFAFA9FFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAF
%FFFFFFAFFFFFAFFFA9FFAFFFA8AFA9AFA8AFA9AFA8FFA9AFA8FFA9AFA8FF
%A9AFA8FFA9AFA8FFA9AFA8FFA9AFA8FFA9FFAFFD07FFC8C6C0C6C0C6C0C6
%C0C6C0C6C0C6C0C650279EC6C0C6C0C6C0C6C0C6C0C7C1CFA8FFA9AFA8FF
%A9AFA8FFA9AFA8FFA9AFA8AFA9AFA8FFAFFFA9FFAFFFA9FFAFFFA9FFAFFF
%A9FFAFFFA9FFAFFFA9FD06FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFD07FFC8C7C6C7C6C7C6C7
%C6C7C6C7C6C7C6C7C69F7BC7C6C7C6C7C6C7C6C7C6C7C6C7C1FFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFD1AFFAFFFA9FFAFFFA8AFA9AFA8AF
%A9AFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FF
%A8FFAFFFFFFFC7C6C0C6C6C6C0C6C6C6C0C6C6C6C0C6C6C6C0C6C6C6C0C6
%C6C6C0C6C6C6C0C6C0C1C0CFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8AFA9AF
%A8AFFFFFAFFFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FD04FFAFFF
%AFAFA9FFAFAFA9FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFFFFFC8C7C6C7C6C7C6C7C6C8C8C7C6C7C6C7C6C7
%C6C7C6C7C6C7C6C7C6C7C6C8C8C8C6C7C0C7C0FFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFA9FFAFAFA9FD07FFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFA9
%FFAFFFA9FFA9AFA8AFA9AFA8AFA9AFA8FFA9AFA8FFA9AFA8FFA9AFA8FFA9
%AFA8FFA9AFA8FFA9AFA8FFA9AFA8AFA6C6C0C6C0C6A5C9A8FFA9FFA8FFA7
%C8C0C6C0C6C0C6C0C6C0C6C0C8A7FFA8FFAFFFA8C9C1C19FFFA9AFA8FFA9
%AFA8FFA9AFA8FFA9AFA8AFA9AFA8FFFFFFA9FFAFFFA9FFAFFFA9FFAFFFA9
%FFAFFFA9FFAFFD06FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFCAC7C6C7C6C7C9FD04FFA8
%5252A8FFFFCFC7C7C6C7C6C7C6C7C7FD04FFAF53527DFFFFFFC8C7C8FFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFD18FFA9FFAFFFA9FFA9AFA8AFA9
%AFA8AFA9AFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8
%FFA9AFA8C7C6C6C0C7A8FFFFFFA827F827F8A8FFFFAFFFC7C7C6C6C0C7C8
%FFAFFFFF7DF827F852FD04FFA7C7A7AFA8FFA9FFA8FFA9FFA8FFA9AFA8AF
%A9AFA8FD05FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFFFAFFFFFFFAF
%FFAFAFA9FFAFAFA9FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFCEC6C7C6C7C9FFFFFFA8272727F827A8FF7D527DFFC7
%C7C6C7C7FD04FF7D2727F82752FFA87D52FFC9C7AFFFAFFFAFFFAFFFAFFF
%AFFFAFAFA9FFAFAFA9FD07FFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFAFFFA9
%FFAFFFA8AFA9AFA8AFA9AFA8AFA9AFA8FFA9AFA8FFA9AFA8FFA9AFA8FFA9
%AFA8FFA9AFA8FFA9AFA8FFC6C6C0C6A6FFAFFFFF52F827F827F8522727F8
%27A8CFC0C6C6CFA9FFFFA8F827F827F8525227F82752FF9FC9A9AFA8FFA9
%AFA8FFA9AFA8AFA9AFA8AFA9AFA9FFFFFFA9FFAFFFA9FFAFFFA9FFAFFFA9
%FFAFFFA9FD08FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFC9C7C6C7C7FD05FF202727272027272720
%272784FFCEC6CEFD04FF522727272027272720272752AFCFC7FFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFD16FFAFFFA9FFAFFFA9AFA9AFA8AFA9AF
%A8AFA9AFA8FFAFFFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9AFA8C7
%C6C6C0C9AFFFFFFF7D27F827F827F827F827F82752FFA7C6A8FD04FF52F8
%27F827F827F827F827F8A8A9C8A7AFA8FFA9FFA8FFA9FFA8AFA9AFA8AFA9
%AFAFFD05FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FD04FFAFFFFFFFA9FFAF
%AFA9FFAFAFA9FFAFAFA9FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFCFC6C7C6C7C9FD04FFA82727F8272727F8272727F87DFFFFC8FD05FF
%2827F8272727F8272727F827A8FFC8C8AFFFAFFFAFFFAFFFAFAFA9FFAFAF
%A9FFAFFD05FFAFFD07FFAFFFFFFFAFFFFFFFAFA9FFAFFFA9FFAFAFA8AFA9
%AFA8AFA9AFA8AFA9AFA8AFA9AFA8FFA9AFA8FFA9AFA8FFA9AFA8FFA9AFA8
%FFA6C6C0C6C6FFA9FFFFFF7E27F827F827F827F827F82752FFA8CFA8FD04
%FF52F827F827F827F827F82720FFAFCA9EFFA9AFA8FFA9AFA8AFA9AFA8AF
%A9AFA8AFFD06FFA9FD07FFA9FFAFFFA9FFAFFD08FFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFC8C6C7C6
%C7AEFD05FF2727202727272027272720AFFFFFCFFD05FF7D272027272720
%272727207DFFFFA8C7C9FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFD11FFAF
%FD04FFA9FFAFFFA9FFAFFFA9AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9
%AFA8AFA9AFA8FFA9AFA8FFA9FFA9FFC6C6C0C6C6FFAFFD04FFA8F827F827
%F827F827F859A9FFA8FFA8FD05FF2727F827F827F827F827A8FFA9CFC0C9
%A9FFA8FFA9FFA8AFA9AFA8AFA9AFA8FD06FFCDC8FD0BFFA9FFAFFFFFAFFF
%FFFFAFFFFFFFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAF
%A9FFAFAFA9FFAFAFA8C7C6C7C6C7CFFD06FF7D2727F8272727F852FFFFAF
%FFCAFD07FF2727F8272727F8277EFFFFFFCAC7C1FFAFFFAFFFAFAFA9FFAF
%AFA9FFAFAFAFFD04FFCFC6FECFFD0BFFAFFFFFAFFFA9FFAFFFA9FFAFAFA8
%AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9
%A8C0C6C0C6C0CFA8FD06FFA85227F827277DA9FFAFFFA8C8A8FFAFFD05FF
%5227F8272052A8FFAFFFA8C9C0C7A8FFA9AFA8AFA9AFA8AFA9AFA8AFA9FD
%05FFC8C6C6CDFFFFFFCFC7CDFD04FFAFFFA9FD0AFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFAFA8C7C6C7C6C7C8
%FD09FFA8FFA8FD05FFAFCFC6FFAFFD09FFA8FD05FFAFFFC8C7C0CFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFCFFD04FFCCC6FEC6FFFFCEC6FEC7FD05FFAFFF
%FFAFFFA9FFAFFFA9FFAFFFA9AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9
%AFA8AFA9AFA8AFA9AFA8AFA9CFC0C6C6C6C0C7A8FFAFFD0BFFA9FFA8FFC8
%C7C8FFA9FD0BFFA9FFAFFFA8C7C0C1A6FFA9AFA8AFA9AFA8AFA9AFA8AFAF
%C7C6CDCFFFC6FEC6C6C9CEC6C6C6CDFD04FFCFFFA9FD04FFAFFFFFFFAFFF
%FFFFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAF
%A9FFA8C7C6C7C6C7C6CEAFFD0DFFAFFFCAC6C6C7CAFFAFFD0BFFAFFFAFC8
%C0C7C0C9A9FFAFAFA9FFAFAFA9FFAFAFA9FFC7FEC6CCC9C7C6C79EC79EC7
%C6C6C8FFCFCEC6CDFFFFAFA9FFAFFFA9FFAFFFA9FFAFFFA8AFA9AFA8AFA9
%AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AEC6C6C0C6C0C6C0
%CFA8FFA8FFAFFFA9FFAFFFA8FFA8FFA8C7C0BC94BDA1FFA8FFAFFFA9FFAF
%FFA8FFA8FFA8C9C0C69EC7A6AFA8AFA9AFA8AFA9AFA8AFA9FFFFCDC6C6C0
%C69E744A754A504A9F9EC8C8C6C6C6A6FFAFFD0EFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFC8C6C7C6C7C6C7C6CFAF
%FD0BFFA8C8C6C28EBDBDB6A1FD0BFFAFCEC0C7C0C7C0C9AFFFAFFFAFFFAF
%FFAFFFAFFFFFFFCEFEC6C774504A7574754A754A759EC7C6FEC6CFFFFFFF
%A9FFAFFFA9FFAFFFA9FFAFFFA9FFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AF
%A9AFA8AFA9AFA8AFA9AFA9AFA6C6C0C6C6C6C0C6C6C9A8FFA8FFA8FFA9FF
%A8FFA7C7C0C6998E8EB68EC2A7FFA8FFA8FFA9FFA8FFA8C8C0C7C0C6C0C7
%A7AFA8AFA9AFA8AFA9AFA9FFC9CDC8CEC69F4A754A4A4A754A504A754A4A
%9EC6C6CCCFFD04FFAFFFFFFFAFFFFFFFAFFFFFFFAFFFAFAFA9FFAFAFA9FF
%AFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9CFC6C7C6C7C6C7C6C7C6C7
%C8CFFFFFA8FFCFCEC7C7C6C7C6C794B18EBCC6C6C8CFCFFFA8FFCFCFC8C7
%C0C7C0C7C0C7C0CEAFAFA9FFAFAFA9FFAFAFC7FEC6FEC6C74A504A505075
%4A5074754A504A759EC7CEFD04FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FF
%A9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8C7C0C6
%C0C6C0C6C0C6C0C6C0C7C6C7C0C7C0C6C0C6C0C6C6C69FC1C0C6C0C6C0C7
%C6C79EC7C0C09EC7C0C69EC7C0C6A7AFA9AFA8AFA9AFA8AFAEC7C6FEC6C6
%74744A4A4A754A4A4A504A4A4A744A75C7FD16FFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFC9C7C6C7C6C7C6C7C6C7C6C7C6C7
%C6C7C6C7C6C7C6C7C6C7C6C6C6C7C6C7C6C7C6C7C6C7C0C7C0C7C0C7C0C7
%C0C7C7FFAFFFAFFFAFFFAFFD04FFCDC6FE9E5174754A514A754A754A504A
%7550754AC7C7CDC8CFFFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9AF
%A9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA9AFC7C6C0C6C6C6
%C0C6C6C6C0C6C6C6C0C6C6C6C0C6C6C6C0C6C6C6C0C6C6C6C0C6C6C6C0C7
%C0C6C0C7C0C6C0C7C0C9A9AFA9AFA8AFA9AFA9FFCFCFC9CCC6754A504A74
%4A504A744A754A4A4A744A4A9EFD04C6CDFFFFFFAFFFFFFFAFFFFFFFAFFF
%FFFFAFFFFFFFAFFFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAF
%A9CFC6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7
%C6C6C6C7C0C7C0C7C0C7C0C7C0C7C0C8AFAFA9FFAFAFA9FFC9FFC9CCC6FE
%C6C774754A504A754A754A754A7550504A504A9FC6FEC6FEC9A9FFAFFFA9
%FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFA9AFA8AFA9AFA8AFA9AFA8AFA9
%AFA8AFA9AFA8AFA9AFA8CEC0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0C6C0
%C6C0C6C0C6C0C6C0C6C0C69EC7C0C69EC7C0C69EC7C0C7A8AFA9AFA8AFA9
%AFA6CCFFC7C6FEC6C69EFD044A504A4A4A754A4A4A754A4A264A74C6C6CD
%CAFD18FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFCEC6C7
%C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C0C7C0C7C0C7
%C0C7C0C7C0C7C0C8A8FFAFFFAFFFAFFFC7CCC8FFCEFEC6FEC6C74A504A75
%74504A7574754A754A504A754A9FC8CFFFFFFFA9FFAFFFA9FFAFFFA9FFAF
%FFA9FFAFFFA9FFAFFFA9FFAFFFA9FFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8
%AFA9AFA8AFA9CAC0C7C6C6C0C6C6C6C0C6C6C6C0C6C6C6C0C6C6C6C0C7C0
%C6C0C7C0C6C0C7C0C6C0C7C0C1C0C9A9AFA8AFA9AFA9A7749FC0CEC9C7C6
%FEC6C69E754A4A4A504A504A744A744A4A4A504A749ECEFD05FFAFFFFFFF
%AFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFD05FFAFAFA9FFAFAFA9FFAFAF
%A9FFAFAFA9FFAFAFA9FFAFFFC8C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7C6C7
%C6C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C8CFA9FFAFAFA9FFAF7C4A754A75
%C7C7C6C6C6FEC6C74A7574504A7574754A7574754A504A5050C7C6CDFFFF
%FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFD09FFA8AFA9AFA8
%AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA7C8C6C6C0C6C6C6C0C6C6C6C0C6C0
%C69EC7C0C69EC7C0C69EC7C0C09EC7C0C8A7AFA9AFA8AFA9AF7D514A744A
%504A509EFD05C6C0744A754A4A4A744A4A4A504A4A4A504A7BC0C6C6CEFD
%13FFAFFD0DFFAFAFA9FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFA8CE
%C7C7C6C7C6C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C0C7C7C9C9FFAFFFAFFF
%AFFFAFA875754A7550754A504A75C6C7C6FEC6C79E754A5074754A505075
%4A504A754A75C6C7C6FEC6CFFFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAF
%FFAFFD09FFAFAF84AF85AF84AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA9AFA8
%C99FC7C0C6C075509FC0C7C0C6C0C7C0C6C0C7C1C8A7CFA8AFA9AFA9AFA8
%AFA9A87C7C4A4A267450744A504A504A7BC6C6C6FEC6C674504A744A504A
%504A504A4A4A749EC6C6FEC6C6C9FD04FFAFFFFFFFAFFFFFFFAFFFFFFFAF
%FD0BFFA9AF85AF85AF85AF85AF85AF85AF85AF85AF85AF85AF85AF52519F
%C7C0C7C6C77427269FC0C7C0C7C0C7C0754AAFAFAFA9AFAFAFA9FFAFAF7C
%754A754A754A504A7574754A754A754AC7C7CDC7CDC7C7747574754A754A
%4A4A754A509EC7C9CEC8CECFFFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFF
%AFFD09FFA98584AF84A984AF84A984AF84A984AF848584AF84A984AF5126
%F84BC0C69EC7C0C64A2626C19EC7C0C6C075F82684AF84A984AF84A984AF
%8584514A4A744A4A4A5026504A4A4A504A4A74C8C8C9C9C7C6C674504A4A
%4A504A4A4A759EC6C6CFFD1FFFAFAF85AF85AF85AF85AF85AF85AF85AFA9
%AFA9AFA9AFA9AF5226264B2651C0C7C6C7C0C7512726C1C6C7C09F262620
%A8AFAFA9AFA9AF85AF85AF85AF7D504A51507574754A504A7550754A75C6
%C7C6FEC6FEC6C79E7550755075749FC6C7C6FEC7FD06FFA9FFAFFFA9FFAF
%FFA9FFAFFFA9FD0BFFA9AF85AF84AF85AF84AF85AF84AFA9AF84AFA9AFA8
%AFA9AFA85120272627264B74C7C0C6C0C7744B26514A4BF820F8267DAFA9
%AFA8AFA9AF84AF85AF84AF7D4A267450744A504A4A4A754A4A4AC7C6C6C6
%FEC6C6C6A5C6C69EC7C0C7C8C7C6C6C6FECFFD06FFAFFFFFFFAFFFFFFFAF
%FD0EFFAF85AF85AF85AF85AF85AFAFAFA9AFAFAFA9AFAFAFA9AFA9C89E4B
%2627264B262750C7C6C7C0C7C69F50512675509FC0CFA9AFAFAFA9AFAFAF
%A9AFA9AF85AF7D504A5074504A7550504A504A749EC7C6FEC6FEC77C57FE
%C6FEC6C7CFFFC7FEC6FEC6FD06FFAFFFA9FFAFFFA9FFAFFFA9FFAFFD0BFF
%84A984AF84A984AF85AF84AFA9AF84AFA9AF84AFA9AF84AEC0C674FD0426
%27262626759EC6C0C7C0C19EC1C0C09EC7A8AF84AFA9AF84AFA9AF84AF84
%AF84AF7D744A4A4A744A744A4A26504A9FFD04C6C8A87BA5A4FEC6C6C9FF
%FFFFC8FEC6C6CAFD0AFFAFFFFFFFAFFD0EFFAF85AF85AF85AFAFAFA9AFAF
%AFA9AFAFAFA9AFAFAFA9AFA7C7C0C77527264B264B264B264B519FC0C7C0
%C7C0C7C0C7C1AFA9AFAFAFA9AFAFAFA9AFAFAFA9AF85AF7C754A504A7550
%504A754A509ECCC6CECFFFA7FEC6CCC6FECEFD05FFCFCECEFD06FFAFFFA9
%FFAFFFAFFFFFFFA9FD0DFFA98584AF85AFA8AFA9AF84AFA9AF84AFA9AF84
%AFA9AFA97C9EC6C0C750262627262626272626264B264B4A754A4B207CAF
%AF84AFA9AF84AFA9AF84AFA9AF84AF85A9FD054A504A504A504A9FC9FFFF
%FFA9A6C6C6C6FEC9FFCACDC8FD16FFAFFD0DFF85AF85AFAFAFA9AFAFAFA9
%AFAFAFA9AFA9AFA9FFAFFF5151C6C7C0C77527264B2627264B26272626F8
%26F826F826A7FFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AF857C4A7574504A
%504A754A75C6CDCFFFFFCFA4FEC6FECEFFCEFEC6CCFD0BFFA9FD0BFFAFFD
%0CFFAF84AF84AFA9AF84AFA9AF84AF84AFA8AFAFFD04FF51F875C0C69EC6
%7427F827262626272626F826F826F82051FFFFFF85AF84AFA9AF84AFA9AF
%84AFA9AF84AF7D744A75FD064A74C6C6C6C7CF7DFD04C6CFC8C6C6C6C7FD
%04FFCFFD21FFFD04AFA9AFAFAFA9FFAFFD09FF5227267BC6C7C6C79E7526
%27264B262720272626202726FD05FFA9AFAFAFA9AFAFAFA9AFAFAFA9AF85
%AF4A754A504A754A504A9FC6FEC6FEC6A6C6C7C6C79FC7C6C6C6CDFFFFC9
%CDC7FD22FFAFFFAFFFA9FFAFFD0CFF7D20272651C0C7C0C6C09F4A262026
%F826F8262020F8A8FD04FFC9C8A8AFA9AF84AFA9AF84AFA9AF84AF844A4A
%504A504A754A74C0FD06C69F507450744A7574C6C7CEC6C6C6CDFD35FFA8
%27264B265175C7C6C7C0C79F752627F826F82626A8FD04FFCEFEC6CCA7AF
%A9AFA9AFAFAFA9AFAFAF85A14A4A4A754A754A759EC6C6FEC6C69E9F4A4A
%4A7550504A754A9FC6C7C6FEC9FD14FFA8FD15FFA8FD0BFF272626272626
%267B9EC69EC7C0C174754A4A26A8FD04FFCFC6C6FEC6C6A6AE85AF84AFA9
%AF84AFA9844A504A4A26504A5074FD05C69E744A504A4A4A504A744A4A4A
%9FC0C6C6FD16FFA8FD15FFA8FD09FFCF9F2627264B26272651519F9FC7C0
%C7C0C7C9FD06FFCEC6FEC6FEC6CCC6C9A7AFAFAFA9AFAFA14A504A754A75
%4A507AFEC6FEC6FEC6754A754A754A514A7574754A754AC7C6CEFD14FFAF
%A8FFA8FD13FFA8A8A8FD08FFC8C0C14A27262626272626F826204A75C9CF
%FD07FFCFCEC8CEC8CEC9C7C0C6757C7C7C51754A504A4A4A504A5074C6C6
%FEC6C6C6754A50265050744A504A744A504A4A74C7CFFD14FFA8FFA8FD13
%FFA8FFA8FFA8FD07FFCACFC9C89F75262626272626265252FD10FFCFC6C7
%C6C774754A4A4A754A504A504A759EC7C6FEC6FEC69F4A7574504A754A50
%50754A504A754A749FC7C7CECEFD10FFA8FFA8A8A8FFA8FD0FFFA8A8A8FF
%A8A8A8FD0BFFCAC97C7C527C7DA8A8FFA8FD0FFFC7C6C0C6C6C69E754A50
%4A504A74749FC0C6C0FD05C674FD044A744A4A4A744A50FD054A9FC0C6C6
%C6C7FD0EFFA8FFA8FFA8FFA8FD0FFFA8FFA8FFA8FFA8FD13FFA8FFA8FD0F
%FFCEFEC6C7C6C7C6CDC7C79EC79EC7C6C7C6C7C6FEC6FEC6CCC67574754A
%7574754A504A754A754A514A7574C7C6FEC6CEFD0DFFA8A8A8FFA8A9A8FF
%A8FD0DFFA8FFA8A9A8FFA8A9A8FD0DFFA8A8A8FFA8A9A8FFA8A8A8FD0CFF
%CEFD05C6CEFFCDFD06C67B7BC6C6C6FEC6C6C6C74A504A744A4A4A754A4A
%267550504A504A9FC6FEC7CFFD0DFFA8FFA8FFA8FFA8FFA8FFA8FD0DFFA8
%FFA8FFA8FFA8FFA8FD0DFFA8FFA8FFA8FFA8FFA8FD0DFFC7FEC6FEC8FFFF
%FFC7FEC6FEC6C6C8832DA6C7FEC6FEC6FE9E754A5050754A504A754A504A
%754A504A507ACDCFFD0EFFA8A8A8FFA8A8A8FFA8A8A8FFA8FD09FFA8FFA8
%A8A8FFA8A8A8FFA8A8A8FD0AFFAFA8FFA8A8A8FFA8A8A8FFA8FD0CFFCDC7
%CECFFD04FFCDC6FEC6C6C7FF7D577CFFC8C6C6FEC6C6FD054A504A4A4A50
%4A74264A4A504A9FC8FD10FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD09FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FD09FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD13FF
%C9FEC6FEC7FFFFA85182FFFFCFCECDC7C6754A754A5050754A504A754A51
%4A504A75C6FEC8FD0EFFA8A8A8FFA8A9A8FFA8A9A8FFA8FD09FFA8FFA8A9
%A8FFA8A9A8FFA8A9A8FD09FFA8A8A8FFA8A9A8FFA8A9A8FFA8A8A8FD12FF
%CFC6FEC7FFFFFFA75757FD04FFCEC6C6747550504A504A744A504A4A4A75
%4A4A74C6C6C6C8FD0EFFA8FFA8FFA8FFA8FFA8FFA8FFA8FD09FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FD09FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD05FF81AC
%A6ADA7CFFD09FFCCC8FD04FFCF577BFFFFFFCDC6FEC6C74A754A754A504A
%754A504A754A7550C7C6FEC6FEC9FD0CFFA8FFA8A8A8FFA8A8A8FFA8A8A8
%FD09FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FD07FFA8FFA8A8A8FFA8A8A8
%FFA8A8A8FFA8FFFFFFCF8181A5818181A5A6ADA8FD05FFCAFD05FFA85751
%FFFFCEFD05C67B4A744A744A4A4A50FD054A9FFD05C6CEFD0DFFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FD09FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD09FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FD05FF82A681A581AB81A581ACA7FD0BFF5757
%A8FFCDCCC6CCC6C7C69F50754A514A504A7550504A9FC6CEC9CECECFFD0D
%FFA8FFA8A8A8FFA8A8A8FFA8A8A8FD09FFA8A8A8FFA8A8A8FFA8A8A8FFA8
%A8FD08FFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA9FD04FFAD81A581A581A581
%A581A581ADFD09FF7C51A7FD05FFA79EC6C07B4A4A4A754A4A4A50509FC6
%C6C9FD12FFA8FFA9FFA8FFA9FFA8FFA9FFA8FD09FFA8FFA8FFA9FFA8FFA9
%FFA8FFA9FD09FFA8FFA9FFA8FFA9FFA8FFA9FFA8FD05FFA78181AB81A581
%AB81A581A581ACCFFD07FF7C57A7FD05FFA6FEC6C7C6C174754A7550759E
%C7C6FEC6CCFD0DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF818181A581A581A581A581A581A5
%A7FD06FF8357A7FD04FFAFC7FD04C6C8C7C0C69EC6C7C8C0FD04C6CFFD50
%FFA681AC81A581AB81A581AB81A581ACADFD05FF837B82FD05FFC6FEC6CD
%CFFFC7FEC6CCC6CFFFCDC6FEC6FECFFD0CFFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA68181A5
%81A581A581A581A581A581A5A7FD04FFA75782FD04FFA8A57AA7FFFFCFCC
%C6C6C6CEFFFFFFCEC6C6C6CFFD0FFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFF
%FFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9
%FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FD04FFCF818181A581A581AB81A5
%81AB81A581A5ADFFFFFFA87B57FD04FFA75757A8FFFFFFA5FEC6CEFD06FF
%CECECFFD0CFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FD0481A581A581A581A581A581A581
%A5A7FFFFCF577BA8FFFFFF7C5751FFFFFF837BC6CEFD55FFA8FD05FFA681
%81AC81A581AB81A581AB81A581AB81ACCFFFFF8257CFFFFFFF83577CFFFF
%FFA757A6FD17FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FD04FFCFFD0581A581A581A581A581A581A5
%81A6FFFF575783FFFFFF7C5757FFFFFF57577DFD18FFA8FFA9FFA8FFAFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA9FD07FFA9FFFFFFA9FFFFFFA9FF
%FFFFA9FFFFFFA9FD07FFA8FFAFFFA8FFAFFFA8FD04FFAC81A581A581A581
%AB81A581AB81A581AB81CFFF8257A7FFFFFF8257A7FFFFA85757FD18FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFFFFFA6FD0681A581A581A581A581A581A581FF7C577CFF
%FFFF575783FFFF832C82FD19FFA8FFAFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFA9FFA8FFA9FFA8FFFFFFA8FFFFFFAFFFFFFFAFFFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA9FFA8FD05FF81A581AC81A581AB81
%A581AB81A581AB81A5A6A75782FFFFA87B57CFFFFF5757A7FD1AFFA8FFA8
%A8A8FFA8A8A8FFA8A8A8FFA8FFA8FFFFFFA8FFFFFFA8FFA8A9A8FFA8A8A8
%FFA8A8A8FFA8FFA8FFFFFFA8FFA8A8A8FFA8A9A8FFA8A8A8FFA8A8A8FD08
%FFADFD0781A581A581A581A581A581A57C7B57FFFFA7577BA8FFA85751FD
%1EFFA8FFA8FFA8FFA8FFA8AFA8FFA8FD09FFA8FFA8A9A8FFA8A9A8FFA8FF
%A8FD09FFA8A9A8FFA8AFA8FFA8FFA8FFA8FD09FFAEA681A581A581A581AB
%81A581AB81A581AB81A55782AEFF827B7BFFFFA75182FD08FFA8CFFD0BFF
%A8FD07FFA8FFA8A8A8FFA8A8A8FFA8A8A8FD09FFFD07A8FFA8A8A8FFA8A9
%A8FD07FFFD05A8FFA8A8A8FFA8A8A8FFA8FD09FF82FD0881A581A581A581
%A581A5817B57AEFF825782FFFF7C5783FFFFFFCFA87C8257577CFD14FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FD09FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD09
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0BFF81A581AC81A581AC81A581AB81
%A581AB81A58181A7FF7B8182FFAE827BFFFFCF83825781578157A7FD0BFF
%AFFFFFFFAFFFFFFFA8FFA8A9A8FFA8A9A8FFA8A9A8FD09FFA8A8A8FFA8A9
%A8FFA8A9A8FFA8A9FD08FFA8FFA8A9A8FFA8A9A8FFA8A9A8FFA9FD0AFFAD
%FD0981A581A581A581A581A557A7FF7B57A7FFA75782A782577B577B577B
%575782FD14FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD09FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FD09FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0CFFAC81A581A581
%A581A581A581AB81A581AB81817CCF577BA7FF7C7B5781577B5782577B57
%8257AEFD0BFFAFFFA8FFAFFFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FD09FF
%A8FFA8A8A8FFA8A8A8FFA8A8A8FD09FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FD0BFFA8FD0A81A581A581A581A58182835757CFA87B577B577B577B57
%7B577B577BA8FD14FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD09FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FD09FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0DFFA78181
%AC81A581AC81A581AC81A581AB81A582A75782A782578257825782578257
%82578182FD0EFFAFFFFFFFAFFFA8A8A8FFA8A9A8FFA8A9A8FFA8FD09FFA8
%FFA8A9A8FFA8A9A8FFA8A9A8FD09FFA8A8A8FFA8A9A8FFA8A9A8FFA8A8A8
%FD0DFFA6FD0A81A581A581A58181577B5757577B577B577B577B577B577B
%57AEFD15FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD09FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FD09FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0FFFA68181A581A581
%A581A581A581A581AB81815782577B5782577B5782577B57825783FD0DFF
%A8FFAFFFA8FFFFFFA8FFA8A8A8FFA8A8A8FFA8A8A8FFFFFFA8FFFFFFA9FF
%A8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FD07FFA8FFA8A8A8FFA8A8A8FFA8A8
%A8FFA8FD0FFF82FD0C81A581A57BFD04577B577B577B577B577B577BA8FD
%16FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD09FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FD09FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD11FFA6A681A581AC81A581AC
%81A581AC818157825782577C5782578257825782A8FD0EFFAFFFFFFFAFFF
%FFFFA8FFA8A9A8FFA8A9A8FFA8A9A8FFFFFFAFFFFFFFAFFFA8A8A8FFA8A9
%A8FFA8A9A8FFA8A9A8FFFFFFAFFFFFFFA8FFA8A9A8FFA8A9A8FFA8A9A8FF
%A8FFAFFD0FFFA6FD0C81A5817B577B5757577B577B577B575783FD18FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FD09FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD09
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD13FFA8AC818181A581A581A581A581
%A57B7B5782577B577B577B5781A7FD12FFA8FFFFFFA8FFA8A8A8FFA8A8A8
%FFA8A8A8FFA8AFA8FFFFFFA8FFFFFFA8AFA8A8A8FFA8A8A8FFA8A8A8FFA8
%FFA8FFFFFFA8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8ADFD0C81FD065751575157A7FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFADA6ADA7ADA6ADA7ADA6ADA6ADA6ADA6ADA6AD
%A6ADA6ADA7ADA6ADA7ADA6ADA6ADA6ADA6ADA6ADA6ADA6ADA6ADA6ADA7AD
%A6ADA7ADA6ADA6ADA6ADA6ADA6ADA6ADA6ADA7ADA6ADA7ADA6ADA7ADA6AD
%A7ADA6ADA7ADA6CEA7AC81AC81A581AC81A581AC818181A681817B828181
%82CEA7ADA6ADA7ADA6ADA7ADA6ADA7ADA6ADA7818181A5818181A5818181
%A5818181A5818181A5818181A5818181A5818181A5818181A5818181A581
%8181A5818181A5818181A5818181A5818181A5818181A5818181A5818181
%A5818181A5818181A5818181A5818181A581A581A581A581A581A581A581
%A581A581A581A581A581A5818181A5818181A5818181A5818181A5AB81A5
%81AB81A581AB81A581AB81A581AB81A581AB81A581AB81A581AB81A581AB
%81A581AB81A581AB81A581AB81A581AB81A581AB81A581AB81A581AB81A5
%81AB81A581AB81A581AB81A581AB81A581AB81A581AB81A581AB81A581AB
%81A581AB81A581AB81A581AB81A581AB81A581AB81A581AB81A581AB81A5
%81AB81A58181A581A581A581A581A581A581A581A581A581A581A581A581
%A581A581A581A581A581A581A581A581A581A581A581A581A581A581A581
%A581A581A581A581A581A581A581A581A581A581A581A581A581A581A581
%A581A581A581A581A581A581A581A581A581A581A581A581A581A581A581
%A581A581A581A581A581A581A5AB81A581AB81A581AB81A581AB81A581AB
%81A581AB81A581AB81A581AB81A581AB81A581AB81A581AB81A581AB81A5
%81AB81A581AB81A581AB81A581AB81A581AB81A581AB81A581AB81A581AB
%81A581AB81A581AB81A581AB81A581AB81A581AB81A581AB81A581AB81A5
%81AB81A581AB81A581AB81A581AB81A581AB81A58181A581A581A581A581
%A581A581A581A581A581A581A581A581A581A581A581A581A581A581A581
%A581A581A581A581A581A581A581A581A581A581A581A581A581A581A581
%A581A581A581A581A581A581A581A581A581A581A581A581A581A581A581
%A581A581A581A581A581A581A581A581A581A581A581A581A581A581A5A5
%81AB81A581AB81A581AB81A581AB81A581AB81A581AB81A581AB81A581AB
%81A581AB81A581AB81A581AB81A581AB81A581AB81A581AB81A581AB81A5
%81AB81A581AB81A581AB81A581AB81A581AB81A581AB81A581AB81A581AB
%81A581AB81A581AB81A581AB81A581AB81A581AB81A581AB81A581AB81A5
%81AB81A581A58181A581A581A581A581A581A581A581A581A581A581A581
%A581A581A581A581A581A581A581A581A581A581A581A581A581A581A581
%A581A581A581A581A581A581A581A581A581A581A581A581A581A581A581
%A581A581A581A581A581A581A581A581A581A581A581A581A581A581A581
%A581A581A581A5FD0881A581AB81A581AB81A581AB81A581AB81A581AB81
%A581AC81A581AC81A581AB81A581AB81A581AB81A581AB81A581AB81A581
%AB81A581AB81A581AB81A581AB81A581AB81A581AB81A581AB81A581AC81
%A581AC81A581AC81A581AB81A581AB81A581AB81A581AB81A581AB81A581
%AB81A581AC81A581AC81A581AC81A581ACFD0481A5818181A5818181A581
%8181A5FD1381A5818181A5818181A5818181A5818181A5818181A5818181
%A5818181A581A581A5818181A5FD1381A5818181A5818181A5818181A581
%8181A5FD1481A5818181A5818181A5818181A5818181A581A581A581A581
%A581A581A581A581A5818181A5818181A5818181A5818181A5818181A581
%8181A5818181A5818181A581A581A5818181A581A581A581A581A581A581
%A581A581A581A581A5818181A5818181A5818181A5818181A581A581A581
%A581A581A581A581A581A581A5FD808181
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
userdict /lv1Fix true put
userdict /_contoneDevice true put
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps true put
userdict /_forceToCMYK true put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
4 Bn
%AI5_BeginGradient: (Linear Gradient 1)
(Linear Gradient 1) 0 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
0 0 50 100 %_BS
%_0 0 50 100 Bs
1 0 50 0 %_BS
%_1 0 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Linear Gradient 2)
(Linear Gradient 2) 0 7 Bd
[
<
FFFEFEFEFDFDFCFCFBFBFAFAF9F9F8F8F7F7F6F6F5F5F4F4F3F3F2F2F1F1F0F0F0EFEFEEEEEDEDEC
ECEBEBEBEAEAE9E9E8E8E7E7E7E6E6E5E5E4E4E4E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDCDCDCDB
DBDBDADAD9D9D9D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D2D1D1D1D0D0CFCFCFCECECECDCDCD
CDCCCCCCCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2
C2C2C1C1C1C1C1C1C0C0C0C0C0C0C0BFBFBFBF
>
<
80818282838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5
A6A7A8A8A9AAABACADAEAFB0B0B1B2B3B4B5B6B6B7B8B9BABBBBBCBDBEBFC0C0C1C2C3C4C5C5C6C7
C8C8C9CACBCCCCCDCECFCFD0D1D2D2D3D4D5D5D6D7D8D8D9DADADBDCDCDDDEDFDFE0E1E1E2E3E3E4
E4E5E6E6E7E8E8E9E9EAEBEBECECEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9F9
FAFAFBFBFBFCFCFCFDFDFDFEFEFEFEFFFFFFFF
>
0
0
1 %_Br
1
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1C1D1E1F20212223242526
2728292A2B2C2D2E2F30303132333435363738393A3B3C3C3D3E3F40414243444546464748494A4B
4C4D4E4E4F50515253545455565758595A5A5B5C5D5E5F5F6061626364646566676868696A6B6B6C
6D6E6F6F70717272737474757677777879797A7B7B7C7C7D7E7E7F7F80
>
0
0
1 %_Br
<
80808181828283838484858586868787888889898A8A8B8B8C8C8D8D8E8E8F8F9090919192929393
9494959596969797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7
A8A8A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBB
BCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCF
D0D0D1D1D2D2D3D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3
E4E4E5E5E6E6E7E7E8E8E9E9EAEAEBEBECECEDEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7
F8F8F9F9FAFAFBFBFCFCFDFDFEFEFFFF
>
0
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0
1 %_Br
<
0000010102020303040405050607070808090A0A0B0C0C0D0E0E0F10111112131314151616171819
191A1B1C1D1D1E1F202021222324252526272829292A2B2C2D2E2E2F30313233343435363738393A
3B3B3C3D3E3F40414243434445464748494A4B4C4D4D4E4F505152535455565758595A5A5B5C5D5E
5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F80
>
<
40403F3F3F3F3E3E3E3E3D3D3D3C3C3C3C3B3B3B3A3A3A3939393838373737363636353535343433
333332323131313030302F2F2E2E2D2D2D2C2C2B2B2B2A2A29292928282727262626252524242323
222222212120201F1F1E1E1E1D1D1C1C1B1B1A1A1919191818171716161515141413131312121111
10100F0F0E0E0D0D0C0C0B0B0A0A0909080807070606050504040303020201010000
>
1
0
1 %_Br
0
<
807F7E7D7C7B7A797877767574737271706F6F6E6D6C6B6A696867666564636261605F5E5D5C5B5A
595857565554535251504F4E4D4C4B4A49484746454443424140
>
1
0
1 %_Br
0
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0F0EFEEEDECEBEAE9E8E7E6E5E5E4E3E2E1E0DFDEDEDDDCDB
DAD9D8D8D7D6D5D4D4D3D2D1D0D0CFCECDCCCCCBCAC9C9C8C7C6C6C5C4C3C3C2C1C1C0BFBEBEBDBC
BCBBBABAB9B8B8B7B6B6B5B4B4B3B2B2B1B1B0AFAFAEADADACACABABAAA9A9A8A8A7A7A6A6A5A4A4
A3A3A2A2A1A1A0A09F9F9E9E9D9D9C9C9B9B9A9A9A99999898979797969695959494949393939292
9191919090908F8F8F8E8E8E8D8D8D8C8C8C8B8B8B8A8A8A8A898989888888888787878787868686
86858585858584848484848383838383838282828282828282818181818181818181808080808080
808080808080808080808080808080808080
>
1
0
1 %_Br
[
0.75 1 0 0 1 50 99.7006 %_BS
%_0.75 1 0 0 1 50 99.7006 Bs
1 0.5 0 0 1 39.0625 80.5389 %_BS
%_1 0.5 0 0 1 39.0625 80.5389 Bs
1 0 0 0 1 45 62.5749 %_BS
%_1 0 0 0 1 45 62.5749 Bs
0.5 0 1 0 1 50 47.6048 %_BS
%_0.5 0 1 0 1 50 47.6048 Bs
0 0.25 1 0 1 56.1404 30.5389 %_BS
%_0 0.25 1 0 1 56.1404 30.5389 Bs
0 0.5 1 0 1 51.0204 16.4671 %_BS
%_0 0.5 1 0 1 51.0204 16.4671 Bs
0 1 1 0 1 29.0909 0 %_BS
%_0 1 1 0 1 29.0909 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Radial Gradient 1)
(Radial Gradient 1) 1 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
1 0 50 0 %_BS
%_1 0 50 0 Bs
0 0 50 100 %_BS
%_0 0 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Radial Gradient 2)
(Radial Gradient 2) 1 7 Bd
[
0
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0F0EFEEEDECEBEAE9E8E7E6E5E5E4E3E2E1E0DFDEDEDDDCDB
DAD9D8D8D7D6D5D4D4D3D2D1D0D0CFCECDCCCCCBCAC9C9C8C7C6C6C5C4C3C3C2C1C1C0BFBEBEBDBC
BCBBBABAB9B8B8B7B6B6B5B4B4B3B2B2B1B1B0AFAFAEADADACACABABAAA9A9A8A8A7A7A6A6A5A4A4
A3A3A2A2A1A1A0A09F9F9E9E9D9D9C9C9B9B9A9A9A99999898979797969695959494949393939292
9191919090908F8F8F8E8E8E8D8D8D8C8C8C8B8B8B8A8A8A8A898989888888888787878787868686
86858585858584848484848383838383838282828282828282818181818181818181808080808080
808080808080808080808080808080808080
>
1
0
1 %_Br
0
<
807F7E7D7C7B7A797877767574737271706F6F6E6D6C6B6A696867666564636261605F5E5D5C5B5A
595857565554535251504F4E4D4C4B4A49484746454443424140
>
1
0
1 %_Br
<
0000010102020303040405050607070808090A0A0B0C0C0D0E0E0F10111112131314151616171819
191A1B1C1D1D1E1F202021222324252526272829292A2B2C2D2E2E2F30313233343435363738393A
3B3B3C3D3E3F40414243434445464748494A4B4C4D4D4E4F505152535455565758595A5A5B5C5D5E
5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F80
>
<
40403F3F3F3F3E3E3E3E3D3D3D3C3C3C3C3B3B3B3A3A3A3939393838373737363636353535343433
333332323131313030302F2F2E2E2D2D2D2C2C2B2B2B2A2A29292928282727262626252524242323
222222212120201F1F1E1E1E1D1D1C1C1B1B1A1A1919191818171716161515141413131312121111
10100F0F0E0E0D0D0C0C0B0B0A0A0909080807070606050504040303020201010000
>
1
0
1 %_Br
<
80808181828283838484858586868787888889898A8A8B8B8C8C8D8D8E8E8F8F9090919192929393
9494959596969797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7
A8A8A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBB
BCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCF
D0D0D1D1D2D2D3D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3
E4E4E5E5E6E6E7E7E8E8E9E9EAEAEBEBECECEDEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7
F8F8F9F9FAFAFBFBFCFCFDFDFEFEFFFF
>
0
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0
1 %_Br
1
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1C1D1E1F20212223242526
2728292A2B2C2D2E2F30303132333435363738393A3B3C3C3D3E3F40414243444546464748494A4B
4C4D4E4E4F50515253545455565758595A5A5B5C5D5E5F5F6061626364646566676868696A6B6B6C
6D6E6F6F70717272737474757677777879797A7B7B7C7C7D7E7E7F7F80
>
0
0
1 %_Br
<
FFFEFEFEFDFDFCFCFBFBFAFAF9F9F8F8F7F7F6F6F5F5F4F4F3F3F2F2F1F1F0F0F0EFEFEEEEEDEDEC
ECEBEBEBEAEAE9E9E8E8E7E7E7E6E6E5E5E4E4E4E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDCDCDCDB
DBDBDADAD9D9D9D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D2D1D1D1D0D0CFCFCFCECECECDCDCD
CDCCCCCCCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2
C2C2C1C1C1C1C1C1C0C0C0C0C0C0C0BFBFBFBF
>
<
80818282838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5
A6A7A8A8A9AAABACADAEAFB0B0B1B2B3B4B5B6B6B7B8B9BABBBBBCBDBEBFC0C0C1C2C3C4C5C5C6C7
C8C8C9CACBCCCCCDCECFCFD0D1D2D2D3D4D5D5D6D7D8D8D9DADADBDCDCDDDEDFDFE0E1E1E2E3E3E4
E4E5E6E6E7E8E8E9E9EAEBEBECECEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9F9
FAFAFBFBFBFCFCFCFDFDFDFEFEFEFEFFFFFFFF
>
0
0
1 %_Br
[
0 1 1 0 1 29.0909 0 %_BS
%_0 1 1 0 1 29.0909 0 Bs
0 0.5 1 0 1 51.0204 16.4671 %_BS
%_0 0.5 1 0 1 51.0204 16.4671 Bs
0 0.25 1 0 1 56.1404 30.5389 %_BS
%_0 0.25 1 0 1 56.1404 30.5389 Bs
0.5 0 1 0 1 50 47.6048 %_BS
%_0.5 0 1 0 1 50 47.6048 Bs
1 0 0 0 1 45 62.5749 %_BS
%_1 0 0 0 1 45 62.5749 Bs
1 0.5 0 0 1 39.0625 80.5389 %_BS
%_1 0.5 0 0 1 39.0625 80.5389 Bs
0.75 1 0 0 1 50 99.7006 %_BS
%_0.75 1 0 0 1 50 99.7006 Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Offset Squares Pattern)
(Offset Squares Pattern) 0 0 55.0781 55.0801 [
%AI3_Tile
(0 O 0 R 0 0 0 1 k
 0 0 0 1 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 55.0801 L
55.0781 55.0801 L
55.0781 0 L
0 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.0471 0.0118 0.6314 0 k
 0.0471 0.0118 0.6314 0 K
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
26.1436 52.3262 m
26.1436 29.4307 L
3.0313 29.4307 L
3.0313 52.3262 L
26.1436 52.3262 L
f
25.0264 50.123 m
5.8906 50.123 L
5.8906 32.4961 L
25.0264 32.4961 L
25.0264 50.123 L
f
*U
*u
5.8906 50.123 m
25.0264 50.123 L
25.0264 32.4961 L
5.8906 32.4961 L
5.8906 50.123 L
n
10.0313 34.2578 m
24.1338 34.2578 L
24.1338 48.3613 L
10.0313 48.3613 L
10.0313 34.2578 L
n
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.0235 0.64 0.78 0.0039 k
 0.0235 0.64 0.78 0.0039 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
22.4082 48.793 m
8.3057 48.793 L
8.3057 34.6895 L
22.4082 34.6895 L
22.4082 48.793 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.1059 0.9294 0.8314 0.0196 k
 0.1059 0.9294 0.8314 0.0196 K
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
52.6943 24.7852 m
52.6943 1.6758 L
28.9355 1.6758 L
28.9355 24.7852 L
52.6943 24.7852 L
f
47.6777 22.582 m
30.0527 22.582 L
30.0527 4.957 L
47.6777 4.957 L
47.6777 22.582 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 1 k
 0 0 0 1 K
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
30.0527 22.582 m
50.6982 22.582 L
50.6982 4.957 L
30.0527 4.957 L
30.0527 22.582 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4315 0 0.8301 0 k
 0.4315 0 0.8301 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
47.4199 21.252 m
32.2393 21.252 L
32.2393 6.5029 L
47.4199 6.5029 L
47.4199 21.252 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4941 0.9412 0 0 k
 0.4941 0.9412 0 0 K
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
27.5391 27.5391 m
27.5391 0 L
0 0 L
0 27.5391 L
27.5391 27.5391 L
f
25.4316 26.1445 m
2.7529 26.1445 L
2.7529 2.1699 L
25.4316 2.1699 L
25.4316 26.1445 L
f
*U
*u
4.9561 7.4004 m
22.582 7.4004 L
22.582 25.0273 L
4.9561 25.0273 L
4.9561 7.4004 L
n
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.0471 0.0118 0.6314 0 k
 0.0471 0.0118 0.6314 0 K
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
22.582 5.6738 m
4.9561 5.6738 L
4.9561 25.0273 L
22.582 25.0273 L
22.582 5.6738 L
f
20.3887 21.3281 m
7.5811 21.3281 L
7.5811 10.0313 L
20.3887 10.0313 L
20.3887 21.3281 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.9137 0 0.498 0 k
 0.9137 0 0.498 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
6.9355 8.7363 m
21.0371 8.7363 L
21.0371 22.8379 L
6.9355 22.8379 L
6.9355 8.7363 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8235 0 0.0039 0 k
 0.8235 0 0.0039 0 K
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
55.0781 55.0801 m
55.0781 27.5391 L
27.5391 27.5391 L
27.5391 55.0801 L
55.0781 55.0801 L
f
52.3252 50.9688 m
30.292 50.9688 L
30.292 28.9355 L
52.3252 28.9355 L
52.3252 50.9688 L
f
*U
*u
30.292 50.9688 m
52.3252 50.9688 L
52.3252 28.9355 L
30.292 28.9355 L
30.292 50.9688 L
n
32.4951 30.0527 m
50.1221 30.0527 L
50.1221 47.6777 L
32.4951 47.6777 L
32.4951 30.0527 L
n
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.0275 0.2078 0.4431 0.0039 k
 0.0275 0.2078 0.4431 0.0039 K
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
50.1221 30.0527 m
32.4951 30.0527 L
32.4951 48.9727 L
50.1221 48.9727 L
50.1221 30.0527 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0.8902 0 0 k
 0 0.8902 0 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
34.9063 33.749 m
49.0078 33.749 L
49.0078 47.8506 L
34.9063 47.8506 L
34.9063 33.749 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(Unnamed Brush Pat 4)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-7890.8833 8490.9551 m
-7799.0479 8490.9551 L
-7799.0479 8486.6758 L
-7890.8833 8486.6758 L
-7890.8833 8490.9551 L
n
0 O
0.695313 0.671875 0.636719 0.738281 k
-7890.6631 8488.2754 m
-7891 8488.3418 -7890.4814 8488.5313 -7890.8833 8488.3887 C
-7890.8379 8488.2705 -7890.7725 8488.1816 -7890.6631 8488.2754 C
f
-7800.1675 8488.4414 m
-7801.2524 8489.2041 -7802.6816 8488.4336 -7803.8701 8488.9199 C
-7804.0098 8488.9521 -7803.8345 8488.502 -7804.1484 8488.6025 C
-7805.3008 8489.1953 -7807.1162 8488.8418 -7808.5195 8488.3848 C
-7808.4346 8488.2666 L
-7808.7017 8488.1816 -7809.0283 8488.5723 -7809.3115 8488.5176 C
-7809.3135 8488.4395 -7809.2207 8488.4063 -7809.2861 8488.2979 C
-7809.3574 8488.5352 -7809.7983 8488.4082 -7809.9185 8488.584 C
-7810.0303 8488.4922 -7810.0195 8488.3047 -7810.1641 8488.2002 C
-7810.3262 8488.4697 L
-7810.7769 8489.1094 -7811.4209 8488.4258 -7812.0361 8488.7559 C
-7812.0063 8488.6934 -7811.9453 8488.6445 -7811.9941 8488.584 C
-7812.9814 8488.9727 -7814.2168 8488.8994 -7815.3208 8489.043 C
-7815.2769 8488.9482 -7815.2363 8488.7754 -7815.3008 8488.668 C
-7815.3555 8488.9512 -7815.6963 8489.0225 -7815.9922 8489.0781 C
-7816.1255 8488.7871 -7816.4995 8489.3438 -7816.8467 8489.1826 C
-7816.8169 8489.1191 L
-7817.0732 8489.4238 -7817.1973 8488.9434 -7817.4053 8489.3086 C
-7817.5684 8489.0801 L
-7817.6807 8489.4902 -7817.9395 8488.8672 -7818.1514 8489.0762 C
-7818.1445 8489.1602 L
-7818.3442 8489.2598 -7818.4482 8489.0537 -7818.6338 8489.123 C
-7818.6514 8489.0762 L
-7819.0854 8489.1826 -7819.3379 8488.9551 -7819.3271 8489.2754 C
-7819.4795 8489.0186 -7818.9063 8489.1582 -7819.1455 8488.7842 C
-7820.5732 8489.1152 -7822.0459 8489.0498 -7823.4834 8489.0566 C
-7823.6465 8488.9277 -7823.7505 8488.8887 -7823.7871 8488.7666 C
-7823.9307 8488.832 -7824.3281 8488.8262 -7824.4585 8488.9902 C
-7824.4102 8488.9834 -7824.5513 8488.8262 -7824.6274 8488.8105 C
-7824.8887 8488.6895 -7824.9131 8489.1621 -7825.2002 8489.0186 C
-7825.0859 8488.9336 -7825.0469 8488.8301 -7825.0854 8488.7109 C
-7825.3301 8488.9609 -7825.6577 8488.9209 -7825.9473 8489.002 C
-7825.9023 8488.9482 -7825.8325 8488.916 -7825.8433 8488.8154 C
-7826.1602 8489.0986 -7826.4209 8488.7559 -7826.6982 8488.9346 C
-7826.5947 8488.75 L
-7827.0415 8488.5254 -7826.7266 8489.1367 -7827.1128 8489.0039 C
-7827.02 8488.9453 -7827.0527 8488.873 -7827.0361 8488.7979 C
-7827.3965 8489.1338 -7827.9795 8489.0225 -7828.3389 8489.1367 C
-7828.3174 8489.1113 -7828.3232 8489.0605 Y
-7828.7148 8489.1025 -7829.1245 8488.998 -7829.5552 8489.1445 C
-7829.7119 8489.0625 -7829.5039 8488.6934 -7829.9185 8488.7617 C
-7829.9033 8489.1328 -7830.6221 8488.9141 -7830.3779 8489.334 C
-7830.7319 8489.2734 -7831.2925 8489.1338 -7831.5283 8489.2598 C
-7831.3691 8489.1191 -7831.7007 8488.8066 -7831.4063 8488.7754 C
-7831.6289 8488.5498 L
-7831.5957 8488.3984 -7831.3999 8488.6016 -7831.4707 8488.4102 C
-7831.6182 8488.4258 -7832.0479 8488.5723 -7832.1797 8488.5117 C
-7832.4531 8488.7393 -7832.7041 8489.1641 -7833.1465 8489.2109 C
-7832.9385 8489.0664 -7833.2646 8488.8018 -7833.1235 8488.7383 C
-7833.7407 8489.4482 L
-7833.8877 8489.4658 -7833.7725 8489.1563 -7833.9854 8489.2529 C
-7833.9746 8489.3506 -7834.0674 8489.4121 -7834.1318 8489.4922 C
-7834.1875 8489.4482 -7834.7441 8489.584 -7834.8081 8489.2178 C
-7834.8735 8489.0762 -7834.5684 8489.1426 -7834.7314 8489.0117 C
-7835.0029 8489.0146 -7835.0151 8489.1406 -7835.2871 8489.1465 C
-7835.2925 8489.0977 L
-7835.4717 8489.043 -7835.8213 8489.2529 -7835.6265 8489.4551 C
-7835.5015 8489.4658 -7835.6738 8489.2354 -7835.4888 8489.3418 C
-7835.6152 8489.5537 -7835.9312 8489.6133 -7836.2031 8489.6162 C
-7836.1104 8489.5586 -7836.1216 8489.4609 -7836.0845 8489.3574 C
-7836.4497 8489.6445 -7836.8369 8489.7354 -7837.2451 8489.8555 C
-7837.2515 8490.0293 -7837.0928 8489.5391 -7837.0327 8489.6309 C
-7837.5557 8489.3896 -7838.1128 8489.9727 -7838.5479 8489.6201 C
-7838.4766 8489.5898 -7838.5098 8489.8672 -7838.5146 8489.8184 C
-7838.7666 8489.7969 -7838.7549 8489.5449 -7838.9189 8489.6377 C
-7838.9355 8489.4902 -7839.1255 8489.6855 -7839.2944 8489.7305 C
-7839.3818 8489.8369 -7839.3384 8489.6582 -7839.1914 8489.6426 C
-7839.4268 8489.7666 -7840.3691 8489.9941 -7840.9131 8489.7793 C
-7840.9023 8489.877 -7841.2471 8490.1377 -7841.3721 8490.127 C
-7841.3232 8489.8984 L
-7841.4375 8489.7617 -7841.7422 8489.918 -7841.7632 8489.7227 C
-7842.0303 8490 -7840.7344 8489.4863 -7841.0957 8489.7002 C
-7841.1895 8489.5098 -7841.5991 8490.0645 -7841.5215 8489.7529 C
-7841.7725 8489.7617 -7842.0161 8490.0186 -7842.2559 8489.8047 C
-7842.1865 8489.8418 -7842.0522 8489.4873 -7842.2549 8489.5039 C
-7842.6123 8489.5449 -7842.3564 8489.6133 -7842.6465 8489.6895 C
-7842.8281 8489.7832 L
-7842.8398 8490.0059 -7843.1475 8489.7529 -7843.0146 8490.002 C
-7843.0586 8489.8184 -7843.5337 8490.1152 -7843.4971 8489.7461 C
-7843.4473 8489.4551 L
-7843.6016 8489.4766 -7843.7002 8489.7617 -7843.8213 8489.8896 C
-7843.8418 8489.8633 -7843.8823 8489.8047 -7843.8745 8489.7578 C
-7843.8994 8490.2031 -7844.2432 8489.7207 -7844.4268 8490.0645 C
-7844.7505 8489.9102 -7845.2495 8490.0498 -7845.4023 8489.7734 C
-7845.6514 8489.9082 -7845.8784 8490.0674 -7846.1621 8489.9727 C
-7846.1055 8489.9307 -7846.0283 8489.918 -7846.0122 8489.8223 C
-7846.1904 8489.6914 -7846.2344 8489.8086 -7846.3975 8489.8809 C
-7846.3608 8489.8145 -7846.7539 8489.6201 -7846.9521 8489.4629 C
-7847.1992 8489.5957 -7847.1143 8489.8359 -7847.1392 8489.9824 C
-7847.3652 8489.543 -7847.8379 8490.2656 -7848.1211 8489.8672 C
-7848.0352 8489.8066 -7847.7598 8489.6514 -7847.9658 8489.541 C
-7848.1919 8489.1025 -7848.4219 8489.8643 -7848.7861 8489.6543 C
-7848.6968 8490.0186 L
-7848.8594 8489.793 -7849.2334 8490.2305 -7849.1963 8489.8594 C
-7849.3184 8489.9902 -7849.6265 8489.7383 -7849.5859 8490.0938 C
-7850.1846 8489.793 -7851.0425 8490.2754 -7851.4102 8489.6377 C
-7851.4961 8489.6973 -7851.7104 8489.6367 -7851.6665 8489.8193 C
-7851.5239 8490.0176 -7851.4673 8489.6777 -7851.4141 8489.8125 C
-7851.4912 8489.8232 -7851.5078 8489.9209 -7851.5161 8489.9697 C
-7851.7021 8489.8887 -7851.8486 8489.8633 -7851.6729 8489.5674 C
-7852.0869 8489.3477 -7852.1001 8490.1719 -7852.6274 8490.0322 C
-7852.6035 8489.8857 -7852.6436 8489.8301 -7852.7979 8489.8535 C
-7853.0903 8490.1055 L
-7853.4312 8490.0469 -7853.2842 8489.7705 -7853.2925 8489.5215 C
-7853.4746 8489.5645 -7853.6973 8489.5527 -7853.7803 8489.7383 C
-7854.0015 8489.4258 L
-7853.8398 8489.6514 -7854.1514 8489.5762 -7854.2368 8489.6367 C
-7854.1514 8489.5762 L
-7854.1846 8489.4697 -7854.3955 8489.5352 -7854.5024 8489.5664 C
-7854.4766 8489.7207 -7854.2617 8489.7832 -7854.1445 8489.8281 C
-7854.2373 8489.9375 -7854.3823 8489.9121 -7854.5059 8490.041 C
-7854.4648 8489.7969 -7854.8027 8489.8672 -7854.9473 8489.8418 C
-7855.1133 8489.7891 -7855.1348 8490.0605 -7855.1831 8490.0527 C
-7855.1875 8489.9258 -7855.4541 8490.0313 -7855.3247 8489.8535 C
-7855.2681 8489.8125 -7855.1953 8489.9766 -7855.1016 8489.8643 C
-7855.2109 8489.7705 -7855.1982 8489.5498 -7855.4258 8489.7109 C
-7855.5967 8489.832 -7855.3818 8490.1934 -7855.7061 8490.0391 C
-7855.6211 8489.9785 -7855.6055 8489.8809 -7855.5391 8489.793 C
-7855.8433 8489.666 L
-7855.8564 8489.8887 L
-7855.8975 8489.832 -7855.8691 8489.8125 -7855.8877 8489.7832 C
-7855.9785 8490.0176 -7856.3521 8489.8555 -7856.4209 8490.1191 C
-7856.5742 8490.1426 -7856.7441 8489.9648 -7856.8906 8489.9395 C
-7856.8623 8489.9199 L
-7857.0415 8489.7891 -7857.2793 8489.875 -7857.4297 8490.0254 C
-7857.4219 8489.9766 L
-7857.5195 8489.959 -7857.7505 8489.9941 -7857.8735 8490.125 C
-7858.1201 8489.957 -7857.9561 8489.2842 -7858.2295 8489.5645 C
-7858.48 8489.5723 -7858.6221 8489.9727 -7858.5215 8490.1152 C
-7858.9717 8489.9648 -7859.4834 8490.3281 -7859.9009 8489.9824 C
-7859.9658 8490.0723 -7859.9248 8490.1289 -7860.0586 8490.1816 C
-7860.7197 8490.0938 -7861.4551 8490.4453 -7861.9814 8490.0078 C
-7861.79 8489.9141 -7861.9688 8489.7842 -7861.9727 8489.6582 C
-7862.1309 8489.8574 -7862.1631 8489.4512 -7862.2197 8489.793 C
-7862.2041 8489.9941 -7862.2197 8490.0918 -7862.0337 8490.1729 C
-7862.4282 8490.2813 -7863.0283 8490.2813 -7863.2471 8490.0938 C
-7863.1377 8490.1865 -7863.2227 8490.248 -7863.3086 8490.3086 C
-7863.2803 8489.9873 -7863.5713 8489.9395 -7863.7915 8490.0527 C
-7863.8223 8490.248 L
-7863.9658 8490.0469 L
-7864.0503 8490.1094 -7864.0591 8490.457 -7864.2773 8490.2695 C
-7864.2891 8490.1934 -7864.3018 8490.1162 -7864.3418 8490.0605 C
-7864.5693 8490.2207 -7864.8906 8490.4922 -7865.1377 8490.3262 C
-7865.3398 8490.041 L
-7865.4453 8490.0723 -7865.6235 8490.2441 -7865.4375 8490.3262 C
-7865.8594 8490.1543 -7866.1309 8490.1328 -7866.2646 8489.8857 C
-7866.9912 8490.4873 -7868.0459 8490.5117 -7868.8906 8490.4688 C
-7868.8652 8490.3223 L
-7869.0923 8490.1855 -7868.9834 8490.5781 -7869.1416 8490.4766 C
-7869.0684 8490.3369 -7869.3145 8490.1729 -7869.1362 8490.002 C
-7869.4609 8489.8477 -7869.5547 8490.2559 -7869.7656 8490.3223 C
-7869.7979 8490.5146 -7869.5957 8490.1992 -7869.6367 8490.4434 C
-7869.6729 8490.5117 -7870.0859 8490.293 -7870.1362 8490.584 C
-7870.2178 8490.4697 -7870.1543 8490.2559 -7870.1104 8490.1377 C
-7870.3086 8490.2793 L
-7870.5513 8489.9395 -7869.7559 8489.6719 -7870.0107 8489.2529 C
-7870.1934 8489.2979 L
-7870.3682 8488.9941 -7869.71 8488.9551 -7870.1689 8488.8506 C
-7870.3682 8488.9941 -7870.5381 8489.416 -7870.3608 8489.5449 C
-7870.7754 8489.625 -7870.5527 8490.2383 -7870.9985 8490.2139 C
-7871.1201 8490.043 -7870.6416 8490.1729 -7870.7275 8489.9336 C
-7870.9375 8489.6992 -7871.1484 8490.0645 -7871.3354 8489.9824 C
-7871.1279 8490.0918 -7871.3032 8490.3857 -7871.4375 8490.4395 C
-7871.6641 8490.3018 -7871.29 8490.1641 -7871.6113 8490.1338 C
-7871.6641 8490.3018 -7871.9595 8490.4277 -7871.7041 8490.5449 C
-7871.8203 8490.9258 -7872.0381 8490.4395 -7872.2129 8490.7344 C
-7872.3174 8490.4658 -7871.8823 8490.1152 -7872.2354 8489.9814 C
-7872.1792 8490.2393 -7872.6704 8490.332 -7872.4839 8490.7139 C
-7872.6221 8490.6406 -7872.6367 8490.4375 -7872.5361 8490.2793 C
-7872.7334 8490.1201 -7873.0151 8490.75 -7873.0801 8490.2383 C
-7873.1479 8490.502 L
-7873.21 8490.416 -7873.2983 8490.3506 -7873.3994 8490.209 C
-7873.5732 8490.2041 -7873.96 8490.5664 -7873.9443 8490.168 C
-7874 8490.209 -7874.3975 8490.1914 -7874.2441 8490.4658 C
-7873.9971 8490.6338 -7873.96 8490.2656 -7873.8223 8490.6377 C
-7873.9971 8490.334 -7874.1787 8490.6777 -7874.3213 8490.7793 C
-7874.3447 8490.625 L
-7874.4297 8490.6855 -7874.6255 8490.6514 -7874.6787 8490.8184 C
-7874.6133 8490.7305 -7874.6475 8490.625 -7874.7148 8490.5879 C
-7874.8042 8490.8223 L
-7875.1494 8490.9395 -7874.8857 8490.4102 -7875.2217 8490.4785 C
-7874.9663 8490.2969 L
-7875.0225 8490.3359 -7875.1367 8490.1162 -7875.2979 8490.1895 C
-7875.3604 8490.4033 -7875.4775 8490.6602 -7875.5313 8490.8262 C
-7875.7207 8490.9199 -7875.6162 8490.585 -7875.8027 8490.8047 C
-7875.5586 8490.5469 L
-7875.5215 8490.4766 -7875.7231 8490.1934 -7875.9761 8490.1992 C
-7876.1377 8490.2734 -7876.3887 8490.582 -7876.1338 8490.6992 C
-7876.2607 8490.7031 -7876.4385 8490.5723 -7876.3379 8490.416 C
-7876.6255 8490.4902 -7876.2998 8490.6465 -7876.5479 8490.7793 C
-7876.6494 8490.6367 -7876.9658 8490.4336 -7877.1563 8490.2266 C
-7876.8975 8489.8682 L
-7877.0693 8489.8643 L
-7876.8467 8489.5781 -7877.1826 8489.6465 -7877.0566 8489.3438 C
-7877.1743 8489.2969 -7877.3169 8489.3994 -7877.4307 8489.4785 C
-7877.0864 8489.9629 -7877.8159 8490.1406 -7877.7158 8490.582 C
-7878.1875 8490.7031 -7878.0107 8489.5078 -7878.5024 8490.1992 C
-7878.4219 8490.3145 -7878.6533 8490.6504 -7878.3564 8490.5225 C
-7878.6494 8490.4746 -7878.5557 8490.9658 -7878.9014 8490.7832 C
-7878.6455 8490.6016 -7879.1763 8490.3359 -7878.8066 8490.0723 C
-7878.8311 8490.2178 -7878.6001 8490.1826 -7878.5435 8490.1426 C
-7878.6641 8489.9727 -7878.5186 8489.6973 -7878.8184 8489.6973 C
-7879.0015 8489.7393 -7879.2524 8489.748 -7879.2158 8489.9785 C
-7879.2085 8490.2314 -7878.9365 8489.9512 -7879.0537 8490.207 C
-7879.4185 8490.2949 -7879.4795 8489.9102 -7879.6304 8490.3594 C
-7879.3999 8490.3232 -7879.3423 8490.584 -7879.3467 8490.7578 C
-7879.6143 8490.8633 L
-7879.5625 8490.6953 L
-7879.9922 8490.5742 -7879.6895 8491 -7880.1055 8490.9551 C
-7880.3008 8490.623 L
-7880.2017 8490.3369 -7879.6953 8490.75 -7879.7695 8490.2842 C
-7880.04 8490.2656 -7880.1299 8490.502 -7880.3848 8490.3818 C
-7880.3281 8490.3418 -7880.2505 8490.3301 -7880.1943 8490.2891 C
-7880.2915 8490.2734 -7880.3877 8489.6563 -7880.7734 8490.0176 C
-7880.9727 8490.1582 -7880.8262 8490.1826 -7880.8311 8490.3574 C
-7881.2656 8490.4102 -7881.3955 8490.5879 -7881.6753 8490.6152 C
-7881.6177 8490.2754 -7882.1699 8490.582 -7881.8608 8490.2344 C
-7881.7188 8490.4336 -7881.0903 8490.4141 -7880.9365 8490.0898 C
-7881.0947 8489.6865 -7880.5952 8490.1465 -7880.5024 8489.7383 C
-7880.8506 8489.7285 -7880.8335 8489.332 -7880.8896 8489.0723 C
-7880.9863 8489.0537 -7881.0801 8489.1641 -7881.1377 8489.2041 C
-7881.1787 8489.4482 -7881.0522 8489.4453 -7881.0449 8489.6973 C
-7881.4336 8489.6309 -7881.8081 8489.7666 -7882.0225 8490.0059 C
-7882.1523 8489.8848 -7882.1113 8489.6406 -7881.9575 8489.6162 C
-7882.4199 8489.6895 -7882.9141 8489.6563 -7883.3535 8489.582 C
-7883.0693 8489.9814 -7883.8433 8489.6758 -7883.6494 8490.0078 C
-7883.4141 8490.0977 -7883.2119 8490.3818 -7883.3418 8490.5605 C
-7883.4888 8490.5352 -7883.3369 8490.3857 -7883.3984 8490.3008 C
-7883.5859 8490.5186 -7883.6895 8489.9512 -7883.8735 8490.2949 C
-7883.4512 8490.166 -7883.7915 8489.8086 -7883.7139 8489.4961 C
-7884.0186 8489.6719 -7883.7007 8489.2734 -7884.0024 8489.2734 C
-7884.3057 8489.4473 -7884.6787 8489.584 -7885.0161 8489.6514 C
-7885.4399 8489.3555 -7886.0898 8489.6465 -7886.4683 8489.6582 C
-7886.6665 8489.5 -7886.5322 8489.1465 -7886.7471 8489.085 C
-7886.9995 8489.0918 -7886.5601 8489.4658 -7886.9336 8489.3047 C
-7886.8975 8489.2344 L
-7887.0107 8489.3154 -7887.5825 8488.9941 -7887.6929 8489.502 C
-7887.5776 8489.1191 L
-7887.6475 8489.084 -7887.7119 8489.1719 -7887.7695 8489.2129 C
-7887.7725 8489.0879 -7887.8535 8488.9746 -7887.7402 8488.8926 C
-7887.9707 8488.6289 -7888.2241 8488.9346 -7888.4746 8488.9453 C
-7888.3135 8489.1719 L
-7888.7422 8489.3496 -7889.0293 8489.125 -7889.4443 8489.2041 C
-7889.4316 8488.9824 L
-7889.6787 8489.1152 L
-7889.6182 8488.8994 -7889.8447 8488.7617 -7889.9751 8488.9414 C
-7889.3335 8488.3984 L
-7889.1553 8488.5293 -7889.5283 8488.666 -7889.4165 8488.8848 C
-7889.3213 8489.0762 -7888.9375 8489.0146 -7888.8755 8488.8018 C
-7889.0225 8488.7773 -7889.0293 8488.8262 -7889.1436 8488.9063 C
-7889.1919 8488.5977 -7888.9688 8488.6094 -7888.8584 8488.4033 C
-7888.9355 8488.416 -7889.0449 8488.3223 -7889.0615 8488.4199 C
-7888.9102 8488.2695 -7888.7578 8488.2461 -7888.5059 8488.2383 C
-7888.6763 8488.3594 -7888.4131 8488.4297 -7888.4775 8488.5176 C
-7888.4575 8488.2461 -7888.2168 8488.1621 -7887.9053 8488.2383 C
-7887.6831 8488.5527 -7887.3208 8488.0361 -7886.96 8488.123 C
-7887.1064 8488.3984 -7887.2935 8488.6191 -7887.5127 8488.7305 C
-7887.2861 8488.8682 -7887.2607 8488.7227 -7887.0337 8488.8613 C
-7886.9238 8488.6563 -7886.8457 8488.3418 -7886.5503 8488.2168 C
-7886.5342 8488.4199 L
-7886.2666 8488.3154 -7886.2666 8488.0146 -7885.9258 8488.0723 C
-7885.3418 8488.1719 -7884.7407 8488.1719 -7884.2949 8488.1973 C
-7884.2783 8488.3994 L
-7884.0303 8487.9658 -7883.4521 8488.2393 -7883.1182 8488.0469 C
-7882.5503 8488.2422 -7881.8848 8487.8535 -7881.5938 8488.2031 C
-7880.5913 8488.0469 -7879.7148 8487.8945 -7878.6768 8487.9688 C
-7878.8516 8488.2637 L
-7878.6655 8488.0469 -7878.7305 8488.4336 -7878.5479 8488.3896 C
-7878.7578 8488.1543 -7878.2949 8488.084 -7878.1665 8487.9033 C
-7877.7041 8488.1328 -7877.1104 8487.8818 -7876.7007 8487.6758 C
-7876.6846 8487.8789 L
-7876.2705 8487.498 -7875.7759 8487.832 -7875.2598 8487.8945 C
-7875.2007 8487.9785 -7875.1074 8488.1689 -7874.9536 8488.1465 C
-7874.6738 8487.8184 -7874.5273 8487.8418 -7874.1167 8487.6367 C
-7873.8169 8487.6367 -7873.3301 8487.7178 -7873.0254 8487.8457 C
-7871.8975 8487.3848 -7870.7456 8487.6797 -7869.5732 8487.4023 C
-7869.4888 8487.6406 L
-7868.3521 8487.1309 -7866.9541 8487.5938 -7865.9839 8487.332 C
-7866.0776 8487.7393 L
-7865.7734 8487.8643 -7865.3843 8487.6328 -7865.4619 8487.3438 C
-7865.1567 8487.4688 -7864.7007 8487.1465 -7864.5068 8487.4814 C
-7864.1953 8487.5566 -7864.1255 8487.293 -7863.8662 8487.2383 C
-7863.2422 8487.3926 -7863.0107 8487.3574 -7862.4224 8487.2813 C
-7862.5684 8487.2559 L
-7862.6328 8487.3457 -7862.6387 8487.5186 -7862.4922 8487.5449 C
-7862.2725 8487.4307 -7861.6846 8487.6543 -7861.9033 8487.168 C
-7861.2754 8487.4482 -7860.4385 8486.9395 -7859.8271 8487.3184 C
-7859.8789 8487.1855 -7859.7246 8487.1602 -7859.6602 8487.0703 C
-7859.1089 8487.0645 -7858.5293 8487.3359 -7858.0898 8487.1094 C
-7858.0024 8487.1758 -7858.2295 8487.3359 -7858.0049 8487.3496 C
-7857.8721 8487.2979 -7858.0024 8487.1758 -7857.8384 8487.1016 C
-7856.9453 8486.8535 -7856.0303 8487.3574 -7855.2188 8487.293 C
-7853.7754 8487.0361 -7852.2695 8487.166 -7850.8867 8487.123 C
-7850.9023 8487.2207 L
-7850.4395 8486.8477 -7849.8159 8487.6025 -7849.4463 8487.041 C
-7849.3369 8487.1338 -7849.0283 8487.085 -7849.1094 8487.2734 C
-7848.7407 8487.0098 -7848.0771 8487.5215 -7847.5439 8487.1865 C
-7847.5928 8487.1777 -7847.6211 8487.1973 -7847.6777 8487.2393 C
-7847.1392 8487.4551 -7846.6641 8487.1602 -7846.0957 8487.3555 C
-7846.1533 8487.3975 -7846.2583 8487.4277 -7846.2754 8487.5254 C
-7846.0557 8487.7129 -7845.7549 8487.1133 -7845.6348 8487.584 C
-7845.5088 8487.5801 -7845.5449 8487.3477 -7845.6221 8487.3613 C
-7844.3779 8487.5449 -7843.0498 8487.2441 -7841.7549 8487.1367 C
-7840.8271 8487.418 -7841.6982 8487.9297 -7840.9663 8487.5781 C
-7840.9063 8487.6689 -7840.9229 8487.3984 -7840.9131 8487.4961 C
-7840.6299 8487.3643 -7840.4717 8488.0215 -7840.2754 8487.7754 C
-7840.3564 8487.4863 -7840.1445 8487.6133 -7840.1387 8487.4375 C
-7839.5713 8487.625 -7839.4575 8487.8857 -7839.0098 8487.666 C
-7839.0435 8487.8184 L
-7838.5186 8487.3887 -7837.9102 8487.6191 -7837.4673 8487.123 C
-7834.5728 8487.0322 -7831.7983 8486.7578 -7828.9761 8486.7002 C
-7826.1865 8486.7949 -7823.4551 8486.5723 -7820.6221 8486.8359 C
-7819.9585 8487.2354 -7819.9087 8487.2246 -7819.1797 8487.0625 C
-7819.2095 8487.127 -7819.2549 8487.1426 -7819.2061 8487.2031 C
-7819.1699 8486.875 -7818.6929 8487.1719 -7818.6235 8486.8594 C
-7817.5762 8486.9199 -7816.6113 8486.8301 -7815.5337 8486.8281 C
-7815.7041 8486.8633 -7815.7896 8487.1309 -7815.5869 8487.1094 C
-7815.3755 8486.8994 L
-7815.3408 8486.9922 L
-7815.2021 8486.9434 -7815.0513 8486.7813 -7815.1943 8486.6758 C
-7812.4873 8486.3926 -7809.8242 8487.0498 -7807.1729 8486.9697 C
-7806.5435 8487.1064 -7805.6475 8486.9814 -7804.9629 8486.9141 C
-7802.9355 8487.3506 -7801.1079 8487.7041 -7799.0479 8487.3984 C
-7799.3169 8488.2461 -7800.1675 8488.4414 V
f
-7890.2578 8488.2422 m
-7890.1855 8488.4063 -7889.9497 8488.4961 -7890.1377 8488.7139 C
-7890.1611 8488.5605 -7890.2822 8488.3887 -7890.2578 8488.2422 C
f
-7883.9619 8489.9297 m
-7883.9536 8489.8809 -7883.8721 8489.9961 -7883.8521 8490.0225 C
-7883.9297 8490.0352 -7884.0024 8490.1729 -7884.0645 8490.0879 C
-7883.9854 8490.0762 -7883.9976 8489.998 -7883.9619 8489.9297 C
f
-7882.3521 8490.0273 m
-7882.3765 8490.1729 -7882.7207 8490.2891 -7882.9238 8490.3066 C
-7882.3521 8490.0273 L
f
-7880.8521 8490.6289 m
-7880.7227 8490.752 -7880.7583 8490.8193 -7880.9326 8490.8154 C
-7880.9453 8490.7383 -7880.8877 8490.6992 -7880.8521 8490.6289 C
f
-7880.7456 8490.2969 m
-7880.6211 8490.293 -7880.5591 8490.3789 -7880.4985 8490.4629 C
-7880.5029 8490.3369 -7880.7871 8490.541 -7880.7456 8490.2969 C
f
-7877.4893 8490.7207 m
-7877.4111 8490.709 -7877.2417 8490.5879 -7877.1689 8490.75 C
-7877.2505 8490.6367 -7877.5498 8490.9346 -7877.4893 8490.7207 C
f
-7875.9761 8490.5 m
-7875.9272 8490.5098 -7875.9072 8490.5361 -7875.8506 8490.4961 C
-7875.7607 8490.5625 -7875.8555 8490.6689 -7875.9312 8490.6826 C
-7875.9761 8490.5 L
f
-7848.4287 8489.9141 m
-7848.5923 8489.9863 L
-7848.5684 8489.8418 L
-7848.4287 8489.9141 L
f
-7836.3574 8489.9063 m
-7836.1943 8489.8145 -7836.2441 8490.043 -7836.2168 8490.0645 C
-7836.3643 8490.0801 -7836.1621 8489.8848 -7836.3574 8489.9063 C
f
-7829.8486 8489.1777 m
-7829.8984 8489.1816 L
-7829.8818 8488.8818 L
-7829.8486 8489.1777 L
f
U
%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe ArtOnPath Br) -
(ush Tool/ Charcoal/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 pt. Flat)
(1 5 5 0 0 90 90 0 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Charcoal)
(1 / Unnamed Brush Pat 4/ / / / / 0 1 /  1 1 1.2 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration])
Pc
0 0 0 0 k
(White)
Pc
0 0 0 1 k
(Black)
Pc
0 1 1 0 k
(CMYK Red)
Pc
0 0 1 0 k
(CMYK Yellow)
Pc
1 0 1 0 k
(CMYK Green)
Pc
1 0 0 0 k
(CMYK Cyan)
Pc
1 1 0 0 k
(CMYK Blue)
Pc
0 1 0 0 k
(CMYK Magenta)
Pc
0.15 1 0.9 0.1 k
(C=15 M=100 Y=90 K=10)
Pc
0 0.9 0.85 0 k
(C=0 M=90 Y=85 K=0)
Pc
0 0.8 0.95 0 k
(C=0 M=80 Y=95 K=0)
Pc
0 0.5 1 0 k
(C=0 M=50 Y=100 K=0)
Pc
0 0.35 0.85 0 k
(C=0 M=35 Y=85 K=0)
Pc
0.05 0 0.9 0 k
(C=5 M=0 Y=90 K=0)
Pc
0.2 0 1 0 k
(C=20 M=0 Y=100 K=0)
Pc
0.5 0 1 0 k
(C=50 M=0 Y=100 K=0)
Pc
0.75 0 1 0 k
(C=75 M=0 Y=100 K=0)
Pc
0.85 0.1 1 0.1 k
(C=85 M=10 Y=100 K=10)
Pc
0.9 0.3 0.95 0.3 k
(C=90 M=30 Y=95 K=30)
Pc
0.75 0 0.75 0 k
(C=75 M=0 Y=75 K=0)
Pc
0.8 0.1 0.45 0 k
(C=80 M=10 Y=45 K=0)
Pc
0.7 0.15 0 0 k
(C=70 M=15 Y=0 K=0)
Pc
0.85 0.5 0 0 k
(C=85 M=50 Y=0 K=0)
Pc
1 0.95 0.05 0 k
(C=100 M=95 Y=5 K=0)
Pc
1 1 0.25 0.25 k
(C=100 M=100 Y=25 K=25)
Pc
0.75 1 0 0 k
(C=75 M=100 Y=0 K=0)
Pc
0.5 1 0 0 k
(C=50 M=100 Y=0 K=0)
Pc
0.35 1 0.35 0.1 k
(C=35 M=100 Y=35 K=10)
Pc
0.1 1 0.5 0 k
(C=10 M=100 Y=50 K=0)
Pc
0 0.95 0.2 0 k
(C=0 M=95 Y=20 K=0)
Pc
0.25 0.25 0.4 0 k
(C=25 M=25 Y=40 K=0)
Pc
0.4 0.45 0.5 0.05 k
(C=40 M=45 Y=50 K=5)
Pc
0.5 0.5 0.6 0.25 k
(C=50 M=50 Y=60 K=25)
Pc
0.55 0.6 0.65 0.4 k
(C=55 M=60 Y=65 K=40)
Pc
0.25 0.4 0.65 0 k
(C=25 M=40 Y=65 K=0)
Pc
0.3 0.5 0.75 0.1 k
(C=30 M=50 Y=75 K=10)
Pc
0.35 0.6 0.8 0.25 k
(C=35 M=60 Y=80 K=25)
Pc
0.4 0.65 0.9 0.35 k
(C=40 M=65 Y=90 K=35)
Pc
0.4 0.7 1 0.5 k
(C=40 M=70 Y=100 K=50)
Pc
0.5 0.7 0.8 0.7 k
(C=50 M=70 Y=80 K=70)
Pc
Bb
2 (Linear Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Linear Gradient 1)
Pc
Bb
0 0 0 0 Bh
2 (Radial Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Radial Gradient 1)
Pc
Bb
2 (Linear Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Linear Gradient 2)
Pc
Bb
0 0 0 0 Bh
2 (Radial Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Radial Gradient 2)
Pc
(Offset Squares Pattern) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Offset Squares Pattern)
Pc
0 g
(K=100)
Pc
0.100006 g
(K=90)
Pc
0.200012 g
(K=80)
Pc
0.300003 g
(K=70)
Pc
0.400009 g
(K=60)
Pc
0.5 g
(K=50)
Pc
0.600006 g
(K=40)
Pc
0.700012 g
(K=30)
Pc
0.800003 g
(K=20)
Pc
0.900009 g
(K=10)
Pc
0.950012 g
(K=5)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
u
1 Ap
0 O
0.06 0 0 0 k
0 J 0 j 1 w 4 M []0 d0 XR
600 43 m
0 43 L
0 600 L
600 600 L
600 43 L
f
0 Ap
0 0 0 0 k
564 415 m
551 420 529 423 519 407 C
523 435 506 465 479 471 C
443 481 389 468 381 427 C
373 474 325 501 281 504 c
228 508 182 474 155 430 c
135 399 138 360 137 325 C
128 338 110 329 100 322 C
81 307 56 291 59 263 C
43 281 20 273 1 264 c
0.663574 263.832 0.33252 263.6465 0 263.4639 C
0 43 L
600 43 L
600 372.8906 L
591.9668 371.9023 584.1172 370.4233 577 369 C
590 385 579 410 564 415 C
f
0.02 0 0 0.01 k
461 76 m
450 79 440 77 429 76 C
407 73 387 64 365 66 c
296 71 229 71 161 74 c
129 76 98 78 68 87 c
53 91 40 100 26 108 c
17.2925 112.7891 8.63379 117.335 0 121.7734 C
0 43 L
600 43 L
600 71.5469 L
597.5967 71.1875 595.2461 70.6738 593 70 c
549 57 504 63 461 76 c
f
0 0 0 0.13 k
70.6016 247.5078 m
70.6016 249.5527 L
69.8516 248.5293 L
69.1021 249.5527 L
69.1021 247.5078 L
37.6035 204.5547 L
37.6035 41.0625 L
69.1021 41.0625 L
70.6016 41.0625 L
102.1001 41.0625 L
102.1001 204.5547 L
70.6016 247.5078 L
f
174.8467 247.5078 m
174.8467 249.5527 L
174.0967 248.5293 L
173.3467 249.5527 L
173.3467 247.5078 L
141.8486 204.5547 L
141.8486 41.0625 L
173.3467 41.0625 L
174.8467 41.0625 L
206.3447 41.0625 L
206.3447 204.5547 L
174.8467 247.5078 L
f
279.0913 247.5078 m
279.0913 249.5527 L
278.3413 248.5293 L
277.5918 249.5527 L
277.5918 247.5078 L
246.0933 204.5547 L
246.0933 41.0625 L
277.5918 41.0625 L
279.0913 41.0625 L
310.5898 41.0625 L
310.5898 204.5547 L
279.0913 247.5078 L
f
0 0 0 0.17 k
37.6035 150.123 m
37.6035 117.9395 L
46.5068 122.4355 59.0215 120.7129 69 120 c
80.2876 119.5488 91.168 116.8555 102.1001 114.4043 C
102.1001 149.0283 L
80.375 147.667 58.876 147.8535 37.6035 150.123 C
f
141.8486 110.8438 m
142.2324 110.8965 142.6147 110.9404 143 111 c
159 113 173 116 189 119 c
194.8013 120.1602 200.6016 120.4141 206.3447 119.9531 C
206.3447 157.3271 L
184.9287 156.1074 163.5176 155.0732 141.8486 152.916 C
141.8486 110.8438 L
f
285 165 m
271.9326 162.8223 258.9829 161.292 246.0933 160.1191 C
246.0933 110.4756 L
248.7646 110.4824 251.4487 110.9063 254 112 C
272.085 118.9561 291.6211 121.5508 310.5898 118.4512 C
310.5898 168.6563 L
302.1162 167.5771 293.5869 166.4316 285 165 c
f
0.47 0.0784 0.9333 0.16 k
449.6191 31.502 m
546.8662 45.1826 546.8662 118.5771 V
449.6191 108.3467 449.6191 31.502 v
f
0.47 0.0784 0.9333 0.25 k
487.5586 97.8145 m
467.2861 84.8984 449.6191 64.2539 449.6191 31.502 C
488.5928 36.9932 517.1953 59.6416 V
511.2295 61.0117 505.459 63.0605 500 66 c
486.4502 73.2959 483.7676 86.0234 487.5586 97.8145 C
f
u
0.47 0.0784 0.9333 0.16 k
496.8535 137.4385 m
494.1211 131.0488 483.8418 99.3779 474.2949 69.7285 c
472.0557 62.5811 469.5439 55.707 467.0078 49.3691 C
482.9941 140.8018 486.0371 234.1309 531.3301 316.251 C
519.4561 322.0283 L
518.9697 322.0361 503.7197 278.4814 498.7803 260.6924 C
493.957 249.4424 477.4961 193.3008 469.5752 139.167 c
466.3867 118.4316 462.9258 98.2881 459.8486 81.3105 C
454.3018 138.2002 440.0098 192.7217 441.8271 248.7334 C
428.2441 248.2285 L
427.9775 248.0527 433.5801 215.8213 435.2744 202.8916 C
435.5391 194.2314 439.9697 153.085 444.6797 114.4736 c
449.5527 75.7822 448.5713 39.1895 448.4033 39.2295 C
451.7686 39.4463 L
451.1631 36.5771 450.7822 34.9951 450.7227 35.0068 C
460.293 33.7168 L
454.9492 22.0752 450.7188 14.5996 450.6465 14.6758 C
462.6084 9.05957 L
489.5742 61.5918 492.8711 119.0928 518.2725 167.7969 C
506.3057 173.416 L
505.959 173.3262 499.7695 147.4258 496.8535 137.4385 C
f
/BBAccumRotation (0.785398) XT
0.47 0.0784 0.9333 0.31 k
441.8271 248.7334 m
428.2441 248.2285 L
427.9775 248.0527 433.5801 215.8213 435.2744 202.8916 C
435.375 199.5479 436.1025 191.3271 437.2275 180.3027 C
440.5771 178.8457 443.7461 177.0576 446.7188 174.9541 C
443.377 199.4756 441.0234 223.96 441.8271 248.7334 C
f
/BBAccumRotation (0.785398) XT
531.3301 316.251 m
519.4561 322.0283 L
518.9697 322.0361 503.7197 278.4814 498.7803 260.6924 C
494.1777 249.9531 478.9805 198.332 470.7197 146.5889 C
473.7139 142.4941 476.7305 138.4746 479.7871 134.5557 C
488.9414 197.585 500.0781 259.5859 531.3301 316.251 C
f
/BBAccumRotation (0.785398) XT
506.3057 173.416 m
505.959 173.3262 499.7695 147.4258 496.8535 137.4385 C
495.8281 135.0352 493.7324 129.0693 491.0166 120.9717 C
493.2002 118.4834 495.4189 116.0635 497.6807 113.7158 C
503.1387 132.4365 509.335 150.6611 518.2725 167.7969 C
506.3057 173.416 L
f
/BBAccumRotation (0.785398) XT
u
0 0.1 1 0 k
515.6621 296.6455 m
513.8721 282.1064 520.2656 269.2373 v
541.0938 284.9316 543.7051 296.7773 v
552.1865 278.1104 571.2158 279.2725 v
576.6904 295.748 563.1152 310.6211 v
578.1963 300.7832 593.9189 312.2168 v
581.5117 335.7109 569.6572 332.5625 v
592.8311 336.1377 600 349.0645 v
581.3438 360.123 570.2578 352.4766 v
582.7939 363.3398 585.2617 385.1328 v
560.6875 380.1494 558.0996 369.2051 v
555.5078 358.2578 565.0928 391.166 559.8818 398.2051 c
536.6182 391.4609 537.0557 376.1035 v
533.8301 404.0098 524.4434 407.7363 v
512.3438 396.4326 515.7666 374.8633 v
510.3604 390.4834 493.1436 389.3896 v
490.2617 368.9336 501.833 362.5859 v
490.8682 373.9336 470.6875 364.5957 v
479.5928 345.0313 497.3301 348.4063 v
468.4521 350.4961 464.1191 341.7422 v
474.1943 315.8887 495.9355 332.0732 v
471.5869 319.4121 468.9229 306.2041 v
497.2422 300.4775 504.8096 311.6104 v
487.0186 306.4258 486.7422 282.001 v
503.0508 283.0586 515.6621 296.6455 v
f
/BBAccumRotation (0.785398) XT
0 0.23 1 0 k
577.0205 331.499 m
575.0293 332.5 572.9746 333.0215 570.9248 332.791 C
572.2891 333.0576 574.6768 333.582 577.5215 334.4248 C
578.791 340.7715 581.0693 346.8438 584.1758 352.4492 C
583.3184 353.3047 582.4854 354.1875 581.6836 355.0977 C
577.6699 355.3896 573.6172 354.793 570.2578 352.4766 C
573.5615 355.3594 577.1045 361.0996 V
573.6553 366.3477 571.0713 372.2295 569.5654 378.541 C
568.7197 378.5527 567.8906 378.583 567.0576 378.6289 C
563.3633 376.5723 560.167 374.0098 558.7168 370.9219 C
559.2393 373.1563 559.8623 376.1475 560.3867 379.3496 C
553.3525 380.5664 546.7939 383.0957 540.9551 386.6719 C
538.5459 383.7529 536.9375 380.2402 537.0557 376.1035 C
536.4707 381.1572 535.0723 387.2422 V
532.2881 386.2363 529.4199 385.4297 526.4951 384.835 C
522.8574 383.2822 519.0771 382.0801 515.1875 381.249 C
515.2334 379.2285 515.4102 377.1055 515.7666 374.8633 C
514.8135 377.6172 512.4258 380.7363 V
510.0215 380.3398 507.5781 380.0752 505.1143 379.9795 c
504.4893 379.959 503.8682 379.9629 503.251 379.9629 C
502.0918 375.0078 500.3232 370.2383 498.0176 365.7393 C
498.2813 365.4375 498.5361 365.125 498.8281 364.8379 C
498.5225 365.0205 498.1797 365.2109 497.8311 365.3945 C
494.8379 359.6543 490.9863 354.3633 486.4658 349.7227 C
486.4893 349.5469 486.5254 349.3682 486.5498 349.1895 C
487.167 348.9736 487.7979 348.7715 488.4482 348.6074 C
487.8516 348.6055 487.2383 348.585 486.6133 348.5664 C
486.9346 345.8447 487.0625 343.0625 486.9785 340.2363 c
486.8418 335.7129 486.165 331.2861 485.0391 326.9961 C
486.498 327.2402 488.0361 327.6885 489.6543 328.3857 C
488.0596 327.3701 486.2695 326.1621 484.4307 324.8223 C
484.0703 323.6123 483.665 322.4189 483.2246 321.2354 C
487.7432 316.7461 491.4932 311.4883 494.2471 305.6426 C
494.834 305.7695 495.4189 305.9072 495.9883 306.0635 C
495.5479 305.6367 495.1064 305.1865 494.666 304.7012 C
496.5254 300.5654 497.8906 296.1523 498.6904 291.541 C
502.0537 292.2705 505.499 292.7314 509.002 292.8613 c
509.918 292.8994 510.8311 292.9053 511.7402 292.8994 C
513.0703 294.0313 514.3887 295.2695 515.6621 296.6455 C
515.4863 295.1631 515.4463 292.7334 V
523.5508 292.126 531.1465 289.791 537.8887 286.1074 C
540.709 289.6748 542.9561 293.3887 543.7051 296.7773 C
545.793 292.2041 550.1992 287.7217 V
554.3613 294.9141 559.8945 301.3086 566.3887 306.5 C
565.4404 307.8809 564.3613 309.2549 563.1152 310.6211 C
565.1787 309.2783 568.5596 308.165 V
571.2842 310.1719 574.1563 311.9785 577.165 313.5371 C
576.5557 317.1426 576.2793 320.8662 576.3975 324.6787 c
576.4697 326.9775 576.6846 329.2529 577.0205 331.499 C
f
/BBAccumRotation (0.785398) XT
1 Ap
0.2 0.5 1 0.42 k
573.2725 339.3887 m
572.5723 316.083 553.6904 296.4971 531.0957 295.6602 c
508.5078 294.8145 490.7637 313.0361 491.4648 336.3418 c
492.168 359.6523 511.0557 379.2344 533.6416 380.0801 c
556.2324 380.9209 573.9805 362.7012 573.2725 339.3887 c
f
/BBAccumRotation (0.785398) XT
0 Ap
0.2 0.5 1 0.5 k
545.0273 378.8193 m
552.1543 360.9541 557.875 341.0996 545.7871 324.8428 c
536.1738 312.1748 522.6914 305.4404 507.9141 302.3916 C
514.4023 297.8486 522.3848 295.333 531.0957 295.6602 c
553.6904 296.4971 572.5723 316.083 573.2725 339.3887 c
573.8535 358.6045 561.8975 374.3447 545.0273 378.8193 C
f
/BBAccumRotation (0.785398) XT
u
u
0.2 0.5 1 0.64 k
563.7881 320.9424 m
504.5176 361.4785 L
503.8037 361.9678 503.6602 362.9688 504.1904 363.7207 C
504.1904 363.7207 L
504.7334 364.4668 505.751 364.6738 506.4639 364.1992 C
506.4639 364.1992 L
565.7393 323.6465 L
566.4521 323.1621 566.5928 322.1602 566.0674 321.4131 C
566.0674 321.4131 L
565.7393 320.9521 565.2344 320.6924 564.7217 320.6719 C
564.7217 320.6719 L
564.4014 320.6641 564.0684 320.752 563.7881 320.9424 C
563.7881 320.9424 L
f
/BBAccumRotation (0.785398) XT
U
u
552.751 306.0918 m
496.0801 353.1836 L
495.4229 353.7451 495.3691 354.75 495.9639 355.4531 C
495.9639 355.4531 L
496.5732 356.1582 497.583 356.2832 498.2461 355.7305 C
498.2461 355.7305 L
554.915 308.6455 L
555.582 308.083 555.624 307.0811 555.0391 306.3779 C
555.0391 306.3779 L
554.6963 305.9795 554.2334 305.7676 553.7773 305.751 C
553.7773 305.751 L
553.4082 305.7393 553.042 305.8438 552.751 306.0918 C
552.751 306.0918 L
f
/BBAccumRotation (0.785398) XT
U
u
539.3184 301.1465 m
492.042 338.9043 L
491.3691 339.4434 491.2969 340.4463 491.8857 341.1621 C
491.8857 341.1621 L
492.4688 341.873 493.4824 342.0215 494.1611 341.4863 C
494.1611 341.4863 L
541.4336 303.7236 L
542.1006 303.1816 542.1787 302.1758 541.6025 301.457 C
541.6025 301.457 L
541.2617 301.0498 540.8008 300.8418 540.3242 300.8213 C
540.3242 300.8213 L
539.9678 300.8037 539.6074 300.9121 539.3184 301.1465 C
539.3184 301.1465 L
f
/BBAccumRotation (0.785398) XT
U
u
518.126 299.7861 m
517.3594 300.1982 517.1123 301.1719 517.5615 301.9717 C
517.5615 301.9717 L
556.7256 369.9717 L
557.1904 370.7676 558.1816 371.0781 558.9473 370.6748 C
558.9473 370.6748 L
559.7158 370.2598 559.9668 369.2871 559.502 368.4941 C
559.502 368.4941 L
520.3379 300.4971 L
520.0273 299.9502 519.4766 299.6318 518.9092 299.6074 C
518.9092 299.6074 L
518.6387 299.5996 518.3682 299.6563 518.126 299.7861 C
518.126 299.7861 L
f
/BBAccumRotation (0.785398) XT
U
u
503.4873 310.1504 m
502.7344 310.5703 502.5059 311.5537 502.9746 312.335 C
502.9746 312.335 L
542.0469 377.5098 L
542.5156 378.2949 543.5176 378.5957 544.2705 378.1807 C
544.2705 378.1807 L
545.0234 377.7559 545.2598 376.7822 544.791 375.9932 C
544.791 375.9932 L
505.7188 310.8154 L
505.3984 310.29 504.8535 309.9756 504.293 309.9561 C
504.293 309.9561 L
504.0244 309.9453 503.7441 310.0039 503.4873 310.1504 C
503.4873 310.1504 L
f
/BBAccumRotation (0.785398) XT
U
u
494.6104 321.9023 m
493.8369 322.2842 493.5762 323.2539 494.0234 324.0635 C
494.0234 324.0635 L
524.7119 378.4355 L
525.1592 379.2324 526.1504 379.5664 526.916 379.1641 C
526.916 379.1641 L
527.6846 378.7734 527.9492 377.8018 527.4961 376.9961 C
527.4961 376.9961 L
496.8096 322.623 L
496.5049 322.0801 495.9521 321.75 495.3789 321.7256 C
495.3789 321.7256 L
495.1211 321.7178 494.8564 321.7695 494.6104 321.9023 C
494.6104 321.9023 L
f
/BBAccumRotation (0.785398) XT
U
u
533.7842 300.4395 m
533.0508 300.8896 532.8691 301.875 533.374 302.6523 C
533.374 302.6523 L
565.9238 351.8496 L
566.4268 352.6152 567.4258 352.8613 568.167 352.4111 C
568.167 352.4111 L
568.8965 351.9629 569.084 350.9609 568.5752 350.1934 C
568.5752 350.1934 L
536.0332 300.9883 L
535.7168 300.501 535.1885 300.2227 534.6592 300.2031 C
534.6592 300.2031 L
534.3594 300.1924 534.0508 300.2627 533.7842 300.4395 C
533.7842 300.4395 L
f
/BBAccumRotation (0.785398) XT
U
u
568.2275 335.2383 m
516.9082 372.4531 L
516.2188 372.9668 516.1055 373.9678 516.6563 374.707 C
516.6563 374.707 L
517.207 375.4336 518.2305 375.6172 518.9277 375.1191 C
518.9277 375.1191 L
570.2363 337.9102 L
570.9434 337.4043 571.0557 336.4023 570.5049 335.6572 C
570.5049 335.6572 L
570.1738 335.2188 569.6875 334.9766 569.1846 334.9541 C
569.1846 334.9541 L
568.8438 334.9424 568.5156 335.04 568.2275 335.2383 C
568.2275 335.2383 L
f
/BBAccumRotation (0.785398) XT
U
U
U
u
0 0.1 1 0 k
399.5039 225.9248 m
397.1807 207.0459 405.4854 190.3359 v
432.5264 210.7109 435.9238 226.1006 v
446.9365 201.8613 471.6504 203.3643 v
478.7539 224.7627 461.1309 244.0723 v
480.7148 231.3008 501.1279 246.1475 v
485.0195 276.6621 469.6279 272.5703 v
499.7119 277.209 509.0322 293.9971 v
484.7988 308.3594 470.4023 298.4316 v
486.6836 312.5381 489.8887 340.8418 v
457.9775 334.3633 454.6162 320.1514 v
451.251 305.9375 463.7021 348.6689 456.9316 357.8066 c
426.7139 349.0518 427.2861 329.1152 v
423.0957 365.3594 410.9092 370.1855 v
395.1992 355.5137 399.6396 327.4971 v
392.6211 347.7871 370.2588 346.3633 v
366.5234 319.8008 381.5449 311.5586 v
367.3027 326.291 341.1025 314.1582 v
352.6641 288.7588 375.6992 293.1416 v
338.1943 295.8516 332.5713 284.4883 v
345.6533 250.9209 373.8848 271.9355 v
342.2666 255.5 338.8145 238.3379 v
375.583 230.9023 385.418 245.3604 v
362.3154 238.6299 361.9482 206.9111 v
383.125 208.2871 399.5039 225.9248 v
f
/BBAccumRotation (0.785398) XT
0 0.23 1 0 k
479.1865 271.1924 m
476.6025 272.4844 473.9365 273.1611 471.2705 272.8643 C
473.0449 273.2109 476.1455 273.8906 479.8438 274.9883 C
481.4902 283.2285 484.4424 291.1123 488.4766 298.3975 C
487.3672 299.5039 486.2852 300.6475 485.2432 301.8291 C
480.0293 302.2061 474.7637 301.4385 470.4023 298.4316 C
474.6953 302.1699 479.2988 309.6309 V
474.8193 316.4453 471.4648 324.0771 469.5039 332.2783 C
468.4102 332.2959 467.3281 332.3301 466.25 332.3857 C
461.4551 329.7158 457.293 326.3965 455.4141 322.3867 C
456.0947 325.2852 456.9082 329.1689 457.585 333.3291 C
448.4512 334.9023 439.9336 338.1934 432.3506 342.8359 C
429.2236 339.041 427.1348 334.4854 427.2861 329.1152 C
426.5215 335.6768 424.7168 343.582 V
421.0967 342.2734 417.3711 341.2236 413.5752 340.4512 C
408.8545 338.4395 403.9385 336.877 398.8887 335.7988 C
398.9512 333.1738 399.1758 330.4131 399.6396 327.4971 C
398.4004 331.0781 395.3057 335.126 V
392.1807 334.6133 389.0117 334.2666 385.8066 334.1445 c
384.9932 334.1191 384.1885 334.125 383.3828 334.1211 C
381.8809 327.6885 379.5811 321.4932 376.5908 315.6523 C
376.9297 315.2559 377.2656 314.8555 377.6445 314.4805 C
377.2461 314.7207 376.8047 314.9658 376.3477 315.2119 C
372.4668 307.75 367.4629 300.8818 361.5898 294.8584 C
361.6221 294.6221 361.668 294.3955 361.6963 294.1631 C
362.4951 293.877 363.3164 293.6201 364.1641 293.4082 C
363.3877 293.3984 362.5908 293.3818 361.7822 293.3545 C
362.1904 289.8203 362.3643 286.209 362.251 282.5313 c
362.0781 276.6582 361.1973 270.9121 359.7393 265.3408 C
361.6279 265.6592 363.6289 266.2383 365.7285 267.1416 C
363.6611 265.8242 361.333 264.2559 358.9541 262.5146 C
358.4775 260.9463 357.9541 259.3984 357.3818 257.8613 C
363.248 252.0303 368.1211 245.2041 371.6934 237.6123 C
372.4609 237.7744 373.2148 237.9512 373.959 238.1572 C
373.3799 237.6064 372.8105 237.0156 372.2422 236.3828 C
374.6504 231.0127 376.4258 225.2939 377.4619 219.2988 C
381.832 220.25 386.3018 220.8447 390.8467 221.0127 c
392.0469 221.0547 393.2344 221.0693 394.4102 221.0566 C
396.1426 222.5293 397.8477 224.1377 399.5039 225.9248 C
399.2715 224.0039 399.2178 220.8506 V
409.752 220.0576 419.6152 217.0273 428.3682 212.2393 C
432.0342 216.873 434.9482 221.6924 435.9238 226.1006 C
438.6318 220.1602 444.3564 214.3369 V
449.7646 223.6807 456.9482 231.9814 465.377 238.7227 C
464.1514 240.5166 462.749 242.3018 461.1309 244.0723 C
463.8086 242.332 468.1992 240.8877 V
471.7432 243.4893 475.4727 245.8369 479.373 247.8623 C
478.5811 252.5459 478.2285 257.375 478.377 262.332 c
478.4668 265.3193 478.752 268.2656 479.1865 271.1924 C
f
/BBAccumRotation (0.785398) XT
1 Ap
0.2 0.5 1 0.42 k
474.3232 281.4336 m
473.4092 251.167 448.8877 225.7402 419.5469 224.6426 c
390.208 223.5508 367.166 247.2051 368.0801 277.4775 c
368.9932 307.75 393.5146 333.1777 422.8555 334.2715 c
452.1973 335.3623 475.2363 311.71 474.3232 281.4336 c
f
/BBAccumRotation (0.785398) XT
0 Ap
0.2 0.5 1 0.5 k
437.6445 332.6348 m
446.8945 309.4434 454.3242 283.6553 438.6279 262.5449 c
426.1406 246.0977 408.6299 237.3496 389.4443 233.3916 C
397.8672 227.4951 408.2334 224.2217 419.5469 224.6426 c
448.8877 225.7402 473.4092 251.167 474.3232 281.4336 c
475.0781 306.3818 459.5498 326.8301 437.6445 332.6348 C
f
/BBAccumRotation (0.785398) XT
u
u
0.2 0.5 1 0.64 k
462.0039 257.4795 m
385.0332 310.1162 L
384.1025 310.7568 383.9199 312.0547 384.6094 313.0264 C
384.6094 313.0264 L
385.3105 314.0039 386.6279 314.2705 387.5596 313.6475 C
387.5596 313.6475 L
464.5322 260.9922 L
465.4629 260.3594 465.6416 259.0596 464.9629 258.0859 C
464.9629 258.0859 L
464.5361 257.4912 463.875 257.1504 463.2119 257.1289 C
463.2119 257.1289 L
462.7949 257.1143 462.3682 257.2305 462.0039 257.4795 C
462.0039 257.4795 L
f
/BBAccumRotation (0.785398) XT
U
u
447.6738 238.1973 m
374.0762 299.3516 L
373.2236 300.0762 373.1514 301.3828 373.9287 302.2939 C
373.9287 302.2939 L
374.71 303.2051 376.0273 303.373 376.8906 302.6504 C
376.8906 302.6504 L
450.4824 241.5049 L
451.3438 240.7793 451.4014 239.4717 450.6406 238.5635 C
450.6406 238.5635 L
450.1934 238.043 449.5967 237.7686 449.002 237.7471 C
449.002 237.7471 L
448.5195 237.7285 448.0508 237.877 447.6738 238.1973 C
447.6738 238.1973 L
f
/BBAccumRotation (0.785398) XT
U
u
430.2227 231.7715 m
368.835 280.8047 L
367.9551 281.502 367.8633 282.8076 368.6289 283.7373 C
368.6289 283.7373 L
369.3838 284.6631 370.7031 284.8535 371.5811 284.1582 C
371.5811 284.1582 L
432.9717 235.125 L
433.8408 234.4033 433.9385 233.1016 433.1953 232.1758 C
433.1953 232.1758 L
432.7471 231.6494 432.1445 231.3691 431.5371 231.3467 C
431.5371 231.3467 L
431.0684 231.3291 430.5977 231.4707 430.2227 231.7715 C
430.2227 231.7715 L
f
/BBAccumRotation (0.785398) XT
U
u
402.7031 230.0068 m
401.7109 230.5439 401.3887 231.8076 401.9756 232.8369 C
401.9756 232.8369 L
452.834 321.1445 L
453.4326 322.1865 454.7246 322.5889 455.71 322.0605 C
455.71 322.0605 L
456.7158 321.5273 457.0361 320.2656 456.4316 319.2363 C
456.4316 319.2363 L
405.5732 230.9346 L
405.1748 230.2168 404.4531 229.8027 403.7207 229.7764 C
403.7207 229.7764 L
403.374 229.7607 403.0234 229.8408 402.7031 230.0068 C
402.7031 230.0068 L
f
/BBAccumRotation (0.785398) XT
U
u
383.6953 243.4639 m
382.7139 244.0127 382.4219 245.2861 383.0205 246.3057 C
383.0205 246.3057 L
433.7686 330.9395 L
434.373 331.9531 435.6797 332.3457 436.6533 331.8135 C
436.6533 331.8135 L
437.6348 331.2607 437.9473 329.9961 437.3301 328.9727 C
437.3301 328.9727 L
386.5898 244.3291 L
386.1797 243.6455 385.4619 243.2412 384.7412 243.2168 C
384.7412 243.2168 L
384.3867 243.2012 384.0244 243.2773 383.6953 243.4639 C
383.6953 243.4639 L
f
/BBAccumRotation (0.785398) XT
U
u
372.166 258.7207 m
371.1641 259.2236 370.8203 260.4795 371.4043 261.5332 C
371.4043 261.5332 L
411.2578 332.1396 L
411.835 333.1777 413.125 333.6035 414.1182 333.0908 C
414.1182 333.0908 L
415.1162 332.5801 415.4629 331.3184 414.8711 330.2705 C
414.8711 330.2705 L
375.0264 259.6582 L
374.6299 258.9512 373.9102 258.5225 373.168 258.499 C
373.168 258.499 L
372.8291 258.4824 372.4863 258.5527 372.166 258.7207 C
372.166 258.7207 L
f
/BBAccumRotation (0.785398) XT
U
u
423.04 230.8477 m
422.083 231.4307 421.8506 232.7168 422.5029 233.7227 C
422.5029 233.7227 L
464.7764 297.6143 L
465.4248 298.6104 466.7314 298.9307 467.6885 298.3457 C
467.6885 298.3457 L
468.6377 297.7607 468.877 296.459 468.2256 295.4678 C
468.2256 295.4678 L
425.959 231.5635 L
425.5479 230.9307 424.8672 230.5732 424.1777 230.5459 C
424.1777 230.5459 L
423.7832 230.5313 423.3887 230.624 423.04 230.8477 C
423.04 230.8477 L
f
/BBAccumRotation (0.785398) XT
U
u
467.7686 276.0479 m
401.1182 324.3701 L
400.2266 325.041 400.0811 326.3389 400.7939 327.3027 C
400.7939 327.3027 L
401.5146 328.2402 402.8369 328.4824 403.7461 327.8291 C
403.7461 327.8291 L
470.3809 279.5146 L
471.2959 278.8496 471.4424 277.5518 470.7217 276.5928 C
470.7217 276.5928 L
470.2988 276.0234 469.6572 275.7031 469.0068 275.6768 C
469.0068 275.6768 L
468.5742 275.665 468.1416 275.7852 467.7686 276.0479 C
467.7686 276.0479 L
f
/BBAccumRotation (0.785398) XT
U
U
U
u
0 0.1 1 0 k
502.0615 174.7695 m
500.2666 160.2334 506.6641 147.3613 v
527.4883 163.0615 530.0986 174.9102 v
538.584 156.2393 557.6104 157.3994 v
563.083 173.8789 549.5127 188.7412 v
564.5938 178.9121 580.3135 190.3418 v
567.9023 213.8418 556.0527 210.6875 v
579.2236 214.2627 586.3994 227.1924 v
567.7344 238.249 556.6572 230.6035 v
569.1885 241.4668 571.6582 263.2598 v
547.0908 258.2783 544.4951 247.335 v
541.9063 236.3867 551.4893 269.2949 546.2793 276.3281 c
523.0098 269.5898 523.4541 254.2324 v
520.2256 282.1426 510.8389 285.8623 v
498.7402 274.5576 502.166 252.9902 v
496.7529 268.6104 479.5371 267.5166 v
476.6602 247.0586 488.2246 240.7148 v
477.2637 252.0625 457.084 242.7188 v
465.9922 223.1563 483.7295 226.5313 v
454.8486 228.623 450.5127 219.8633 v
460.5879 194.0195 482.335 210.2021 v
457.9814 197.543 455.3213 184.335 v
483.6367 178.6035 491.2109 189.7373 v
473.415 184.5566 473.1367 160.1338 v
489.4463 161.1914 502.0615 174.7695 v
f
/BBAccumRotation (0.785398) XT
0 0.23 1 0 k
563.416 209.625 m
561.4229 210.623 559.373 211.1475 557.3203 210.917 C
558.6885 211.1816 561.0762 211.7109 563.9268 212.5557 C
565.1885 218.8994 567.4619 224.9707 570.5703 230.5801 C
569.7158 231.4307 568.876 232.3164 568.083 233.2275 C
564.0605 233.5098 560.0146 232.9189 556.6572 230.6035 C
559.9561 233.4863 563.5039 239.2266 V
560.0547 244.4727 557.4668 250.3604 555.9561 256.6699 C
555.1191 256.6816 554.2813 256.71 553.4521 256.752 C
549.7627 254.6963 546.5615 252.1426 545.1113 249.0479 C
545.6328 251.2832 546.2578 254.2744 546.7842 257.4795 C
539.7471 258.6904 533.1934 261.2246 527.3447 264.7979 C
524.9443 261.876 523.3301 258.3721 523.4541 254.2324 C
522.8652 259.2822 521.4756 265.3711 V
518.6826 264.3633 515.8184 263.5605 512.8945 262.957 C
509.2568 261.417 505.4707 260.209 501.5811 259.3799 C
501.6289 257.3613 501.8047 255.2373 502.166 252.9902 C
501.2061 255.7461 498.8242 258.8613 V
496.4189 258.4727 493.9766 258.2021 491.5088 258.1064 c
490.8887 258.0859 490.2676 258.0879 489.6445 258.0879 C
488.4883 253.1367 486.7178 248.3633 484.4141 243.8662 C
484.6748 243.5615 484.9336 243.2529 485.2275 242.9648 C
484.917 243.1475 484.5781 243.3389 484.2285 243.5273 C
481.2334 237.7852 477.3838 232.4902 472.8604 227.8496 C
472.8848 227.6689 472.917 227.4971 472.9443 227.3164 C
473.5596 227.0986 474.1904 226.9023 474.8438 226.7373 C
474.2451 226.7295 473.6338 226.7178 473.0088 226.7002 C
473.3271 223.9756 473.457 221.1934 473.373 218.3613 c
473.2354 213.8379 472.5586 209.4111 471.4385 205.125 C
472.8965 205.3691 474.4307 205.8174 476.0498 206.5127 C
474.4531 205.4932 472.668 204.291 470.8291 202.9512 C
470.4629 201.7412 470.0586 200.5439 469.6191 199.3613 C
474.1387 194.873 477.8926 189.6172 480.6406 183.7676 C
481.2295 183.8984 481.8145 184.0342 482.3809 184.1924 C
481.9424 183.7637 481.502 183.3135 481.0635 182.8242 C
482.9199 178.6924 484.2842 174.2832 485.083 169.6719 C
488.4482 170.3975 491.8896 170.8574 495.3916 170.9883 c
496.3164 171.0225 497.2256 171.0322 498.1357 171.0264 C
499.4697 172.1563 500.7832 173.3936 502.0615 174.7695 C
501.8828 173.2939 501.8389 170.8643 V
509.9453 170.2568 517.5449 167.9189 524.2832 164.2314 C
527.1084 167.7988 529.3555 171.5127 530.0986 174.9102 C
532.1875 170.335 536.5986 165.8506 V
540.7588 173.0469 546.2852 179.4307 552.7871 184.623 C
551.8418 186.0049 550.7607 187.3857 549.5127 188.7412 C
551.5732 187.4053 554.9551 186.292 V
557.6846 188.2969 560.5596 190.1055 563.5596 191.6621 C
562.9551 195.2715 562.6787 198.9971 562.791 202.8027 c
562.8594 205.1045 563.083 207.3779 563.416 209.625 C
f
/BBAccumRotation (0.785398) XT
1 Ap
0.2 0.5 1 0.42 k
559.6738 217.5137 m
558.9688 194.2041 540.084 174.6299 517.4932 173.7881 c
494.8984 172.9434 477.1553 191.1592 477.8564 214.4727 c
478.5654 237.7852 497.4463 257.3652 520.0371 258.2041 c
542.6318 259.0498 560.3711 240.8271 559.6738 217.5137 c
f
/BBAccumRotation (0.785398) XT
0 Ap
0.2 0.5 1 0.5 k
531.4248 256.9463 m
538.5498 239.0869 544.2686 219.2305 532.1875 202.9736 c
522.5674 190.3057 509.084 183.5713 494.3096 180.5186 C
500.7998 175.9775 508.7773 173.4639 517.4932 173.7881 c
540.084 174.6299 558.9688 194.2041 559.6738 217.5137 c
560.251 236.7314 548.2969 252.4756 531.4248 256.9463 C
f
/BBAccumRotation (0.785398) XT
u
u
0.2 0.5 1 0.64 k
550.1836 199.0693 m
490.9141 239.6035 L
490.1953 240.0967 490.0547 241.0957 490.5859 241.8467 C
490.5859 241.8467 L
491.125 242.5957 492.1465 242.8008 492.8594 242.3242 C
492.8594 242.3242 L
552.1328 201.7754 L
552.8516 201.2949 552.9873 200.2832 552.4629 199.54 C
552.4629 199.54 L
552.1328 199.0732 551.6279 198.8193 551.1172 198.7949 C
551.1172 198.7949 L
550.7959 198.7891 550.4678 198.877 550.1836 199.0693 C
550.1836 199.0693 L
f
/BBAccumRotation (0.785398) XT
U
u
539.1465 184.2188 m
482.4795 231.3105 L
481.8184 231.8721 481.7666 232.8789 482.3594 233.5781 C
482.3594 233.5781 L
482.9658 234.2832 483.9814 234.4092 484.6426 233.8564 C
484.6426 233.8564 L
541.3096 186.7764 L
541.9766 186.21 542.0205 185.2061 541.4316 184.5029 C
541.4316 184.5029 L
541.0938 184.1025 540.6328 183.8936 540.1758 183.876 C
540.1758 183.876 L
539.8018 183.8643 539.4385 183.9717 539.1465 184.2188 C
539.1465 184.2188 L
f
/BBAccumRotation (0.785398) XT
U
u
525.71 179.2744 m
478.4414 217.0352 L
477.7637 217.5674 477.6904 218.5713 478.2813 219.2881 C
478.2813 219.2881 L
478.8662 220.001 479.8789 220.1494 480.5566 219.6133 C
480.5566 219.6133 L
527.8271 181.8486 L
528.4941 181.3037 528.5723 180.2939 527.9971 179.583 C
527.9971 179.583 L
527.6572 179.1807 527.1924 178.9668 526.7236 178.9502 C
526.7236 178.9502 L
526.3604 178.9385 526.002 179.0449 525.71 179.2744 C
525.71 179.2744 L
f
/BBAccumRotation (0.785398) XT
U
u
504.5215 177.9131 m
503.7539 178.3252 503.5078 179.3027 503.96 180.0957 C
503.96 180.0957 L
543.1201 248.0947 L
543.585 248.8975 544.5791 249.2041 545.3398 248.8018 C
545.3398 248.8018 L
546.1094 248.3848 546.3594 247.418 545.8965 246.626 C
545.8965 246.626 L
506.7285 178.6279 L
506.4219 178.0771 505.8711 177.7568 505.3027 177.7383 C
505.3027 177.7383 L
505.04 177.7246 504.7695 177.7861 504.5215 177.9131 C
504.5215 177.9131 L
f
/BBAccumRotation (0.785398) XT
U
u
489.8828 188.2783 m
489.1299 188.7012 488.9014 189.6826 489.3682 190.4658 C
489.3682 190.4658 L
528.4424 255.6406 L
528.9063 256.417 529.9102 256.7236 530.665 256.3076 C
530.665 256.3076 L
531.4229 255.8848 531.6592 254.9092 531.1846 254.1221 C
531.1846 254.1221 L
492.1143 188.9414 L
491.7939 188.417 491.249 188.1064 490.6875 188.0889 C
490.6875 188.0889 L
490.416 188.0781 490.1367 188.1367 489.8828 188.2783 C
489.8828 188.2783 L
f
/BBAccumRotation (0.785398) XT
U
u
481.0049 200.0264 m
480.2324 200.4092 479.9717 201.3848 480.416 202.1943 C
480.416 202.1943 L
511.1055 256.5635 L
511.5518 257.3613 512.5498 257.6914 513.3086 257.2949 C
513.3086 257.2949 L
514.0801 256.8984 514.3447 255.9268 513.8955 255.1211 C
513.8955 255.1211 L
483.2061 200.752 L
482.9023 200.2031 482.3477 199.874 481.7783 199.8545 C
481.7783 199.8545 L
481.5176 199.8428 481.249 199.8926 481.0049 200.0264 C
481.0049 200.0264 L
f
/BBAccumRotation (0.785398) XT
U
u
520.1777 178.5635 m
519.4443 179.0127 519.2637 180.002 519.7705 180.7793 C
519.7705 180.7793 L
552.3223 229.9805 L
552.8193 230.7402 553.8252 230.9902 554.5605 230.5381 C
554.5605 230.5381 L
555.291 230.0889 555.4775 229.085 554.9746 228.3223 C
554.9746 228.3223 L
522.4287 179.1084 L
522.1123 178.6279 521.5898 178.3477 521.0586 178.333 C
521.0586 178.333 L
520.7539 178.3193 520.4473 178.3857 520.1777 178.5635 C
520.1777 178.5635 L
f
/BBAccumRotation (0.785398) XT
U
u
554.6221 213.3691 m
503.3076 250.5781 L
502.6123 251.0908 502.502 252.0967 503.0547 252.8359 C
503.0547 252.8359 L
503.5996 253.5586 504.6211 253.751 505.3262 253.2383 C
505.3262 253.2383 L
556.6289 216.0352 L
557.3428 215.5283 557.4502 214.5273 556.9014 213.7861 C
556.9014 213.7861 L
556.5732 213.3496 556.0781 213.1025 555.5762 213.085 C
555.5762 213.085 L
555.2451 213.0684 554.9082 213.1689 554.6221 213.3691 C
554.6221 213.3691 L
f
/BBAccumRotation (0.785398) XT
U
U
U
U
0.35 0 1 0 k
468.6162 44.3535 m
447.3076 195.8096 333 195.8096 V
348.9336 44.3535 468.6162 44.3535 v
f
0.4 0 1 0 k
335.4092 195.7598 m
334.6045 195.7744 333.8135 195.8096 333 195.8096 C
348.9336 44.3535 468.6162 44.3535 V
467.4473 52.6611 464.1895 65.3838 V
408.1943 93.1016 361.9629 139.0352 335.4092 195.7598 C
f
u
0.2 0 0.02 0 k
327.6387 316.9644 m
320.9316 313.1138 338.043 275.3242 340.623 271.5205 c
353.1328 253.0459 392.2207 226.9912 414.3965 241.1016 c
443.0781 259.3496 410.0234 291.7607 392.793 303.2485 c
351.6465 330.6782 327.6387 316.9644 v
f
0.27 0 0.02 0 k
392.793 303.2485 m
351.6465 330.6782 327.6387 316.9644 v
324.668 315.2588 326.373 306.9009 329.4102 297.7861 C
367.5996 301.0986 410.6602 292.123 419.1445 251.125 C
419.4512 249.2793 419.6777 247.3799 419.8594 245.4551 C
438.1758 264.1201 408.7246 292.626 392.793 303.2485 C
f
0.2 0 0.02 0 k
261.3398 321.5361 m
140.1753 342.1104 113.8838 288.3867 v
100.168 232.3779 204.186 267.8125 v
252.1958 268.9561 261.3398 321.5361 v
f
0.27 0 0.02 0 k
150.748 285.457 m
183.8594 302.0107 219.0474 297.7832 253.7705 299.0605 C
257.1187 305.2529 259.7925 312.6436 261.3398 321.5361 C
140.1753 342.1104 113.8838 288.3867 V
109.7485 271.4785 123.2744 262.1182 V
130.624 271.7051 139.457 279.8105 150.748 285.457 c
f
0.1 0 0.02 0 k
238.479 427.8408 m
234.7036 442.938 206.9277 462.5332 195.7681 471.3008 c
164.0298 496.2329 125.8066 512.2539 84.7715 509.7627 c
54.4443 507.9229 26.4175 486.3101 26.8682 454.3418 c
27.9854 375.1196 112.1465 319.6694 182.8042 311.0566 c
191.064 310.0503 267.4204 312.0762 267.3149 312.5029 c
267.3066 312.5347 238.5098 427.7188 238.479 427.8408 c
f
0.15 0 0.02 0 k
127.3408 407.1704 m
94.5713 410.291 69.6064 438.3784 61.8018 471.1479 C
57.8696 483.7339 60.2827 494.7339 64.2417 505.3472 C
42.9141 497.252 26.5215 478.8457 26.8682 454.3418 c
27.9854 375.1196 112.1465 319.6694 182.8042 311.0566 c
191.064 310.0503 267.4204 312.0762 267.3149 312.5029 c
267.3096 312.5234 254.4951 363.7808 245.9502 397.9492 C
206.5771 401.2544 166.5488 402.3696 127.3408 407.1704 c
f
0.1 0 0.02 0 k
347.0703 417.5532 m
367.6445 506.7109 446.5156 495.2817 v
464.7148 492.6455 485.8242 468.0986 492.1582 452.2881 c
499.623 433.668 498.6563 411.6733 491.3496 393.1621 c
479.1699 362.3022 444.9023 331.1416 416.0039 316.4644 c
403.8848 310.3105 390.8359 306.7603 377.334 305.4297 c
373.4922 305.0513 332.6855 305.2642 332.832 306.3809 c
332.832 306.3872 347.0703 417.5532 Y
f
0.15 0 0.02 0 k
492.1582 452.2881 m
485.8242 468.0986 464.7148 492.6455 446.5156 495.2817 c
446.4297 495.2939 446.3516 495.3018 446.2695 495.3145 C
454.3867 486.0596 460.2656 474.6357 462.8359 461.7852 C
465.9551 438.3784 459.7148 416.5327 448.7891 396.248 C
445.668 397.8071 442.5488 394.6865 442.5488 393.1255 C
414.5488 367.5596 377.0527 378.085 341.9102 377.2808 C
337.8379 345.4619 332.832 306.3828 332.832 306.3809 C
332.6855 305.2642 373.4922 305.0513 377.334 305.4297 c
390.8359 306.7603 403.8848 310.3105 416.0039 316.4644 c
444.9023 331.1416 479.1699 362.3022 491.3496 393.1621 c
498.6563 411.6733 499.623 433.668 492.1582 452.2881 c
f
0.574219 0.605469 0.90625 0.632813 k
312.3955 486.8994 m
310.9824 486.7705 291.0938 514.9023 288.5454 517.4194 c
278.9014 526.9375 260.5005 541.9736 246.0532 539.8149 c
240.5552 538.9956 231.9199 533.6592 232.1738 527.1323 c
232.4868 518.9614 245.8135 515.9658 252.1958 515.0923 c
291.8164 520.4277 295.6318 485.375 v
312.3955 486.8994 L
f
0 0.3 1 0 k
336.8281 303.603 m
334.6406 316.123 332.3477 334.52 316.3457 335.0024 c
310.7529 335.168 305.0713 332.8643 300.0454 330.6802 c
294.7202 328.3643 285.8555 320.3311 280.3867 320.0098 C
280.3657 320.0098 221.1021 316.5029 221.9878 264.1484 C
227.2944 260.6797 231.6426 255.8252 234.4844 250.127 C
244.854 246.6924 253.2119 238.499 256.8413 228.208 C
298.0366 228.2607 344.9961 256.6836 336.8281 303.603 c
f
0 0.38 1 0 k
336.8281 303.603 m
334.6406 316.123 332.3477 334.52 316.3457 335.0024 c
314.5791 335.0552 312.8047 334.8413 311.043 334.4824 C
313.7031 291.5273 289.4575 255.501 254.7305 232.9746 C
255.5454 231.4443 256.2593 229.8574 256.8413 228.208 C
298.0366 228.2607 344.9961 256.6836 336.8281 303.603 c
f
0 0.3 1 0 k
225.7393 245.415 m
225.5376 241.8564 224.1221 237.833 220.1914 233.8975 c
221.4111 235.1221 247.9604 228.6045 250.7563 228.4102 c
252.8174 228.2686 254.9077 228.2266 257.0068 228.2324 C
244.9448 231.5596 233.8623 236.7578 225.7393 245.415 C
f
0.574219 0.605469 0.90625 0.632813 k
222.9546 276.2842 m
223.9307 274.498 221.9438 266.7715 221.9751 264.3936 c
222.061 257.7285 226.1157 251.9912 225.7393 245.415 C
233.8623 236.7578 244.9448 231.5596 257.0068 228.2324 C
269.4697 228.2686 282.4429 230.8877 294.2554 235.8486 C
264.9551 240.0371 236.5317 251.3779 222.9546 276.2842 C
f
269.3418 288.5781 m
259.8477 293.8525 251.7949 300.5576 247.0801 309.6504 C
240.936 306.0347 235.0425 301.1655 230.5063 294.6309 C
247.2427 265.8984 279.1763 246.7949 311.8281 245.666 C
322.6074 253.499 331.0547 263.8027 335.1035 276.2588 C
313.2002 271.1172 290.1284 274.4043 269.3418 288.5781 C
f
288.0669 297.9395 m
303.7373 285.9541 321.5879 285.957 337.7539 292.7871 C
337.7695 296.2744 337.4727 299.8799 336.8281 303.603 c
334.6406 316.123 332.3477 334.52 316.3457 335.0024 c
310.7529 335.168 305.0713 332.8643 300.0454 330.6802 c
294.7202 328.3643 285.8555 320.3311 280.3867 320.0098 C
280.3848 320.0098 278.583 319.9019 275.6255 319.4521 C
276.8086 310.5557 281.1567 302.5459 288.0669 297.9395 C
f
0.574219 0.605469 0.90625 0.78 k
265.6948 228.6836 m
275.396 229.6191 285.1694 232.0332 294.2554 235.8486 C
288.3369 236.6953 282.458 237.8545 276.7207 239.3369 C
273.2021 235.6182 269.5278 232.0596 265.6948 228.6836 C
f
301.6689 275.2021 m
297.5488 266.2881 292.2578 257.9668 286.1694 250.2461 C
294.4922 247.5527 303.1328 245.9658 311.8281 245.666 C
322.6074 253.499 331.0547 263.8027 335.1035 276.2588 C
324.1055 273.6797 312.8203 273.2227 301.6689 275.2021 C
f
336.8281 303.603 m
334.9473 314.3872 332.9746 329.5127 322.2461 333.8179 C
322.3652 327.5151 320.9219 321.0537 317.8613 315.0679 c
317.2305 313.8267 314.4219 307.1797 314.6113 307.915 C
313.749 305.6353 312.877 303.3584 312.0469 301.0625 c
310.5898 297.0225 309.0771 293.0195 307.5098 289.041 C
317.6387 287.0576 328 288.668 337.7539 292.7871 C
337.7695 296.2744 337.4727 299.8799 336.8281 303.603 c
f
0.574219 0.605469 0.90625 0.632813 k
323.0664 488.4243 m
345.1621 529.5615 361.9238 524.2407 v
388.2148 515.8936 318.9336 490.5747 332.5859 483.4692 C
323.0664 488.4243 L
f
0 0.23 1 0 k
291.0596 310.105 m
289.3848 312.8613 246.9185 318.1104 241.2134 320.499 c
210.3042 333.4331 192.3594 366.0034 196.2314 399.3252 c
203.5483 462.2964 266.7559 506.0605 328.5215 493.9292 c
368.8867 486.002 403.6816 455.8979 415.6973 417.7871 c
424.918 388.5396 432.7207 356.853 405.5117 334.5342 c
395.9746 326.7085 384.2266 321.8027 372.6953 317.748 c
365.7891 315.3169 330.377 310.6152 327.6387 305.5342 c
327.6191 305.4976 311.623 275.835 291.0596 310.105 c
f
0 0.32 1 0 k
415.6973 417.7871 m
406.8906 445.7188 385.8438 469.3345 359.3418 483.0869 C
373.2402 468.7026 383.6641 450.2065 391.0547 432.1377 c
400.416 410.291 394.1758 388.4463 381.6914 369.7197 c
359.8457 335.3896 319.2754 327.5879 283.3853 316.6641 C
280.7852 315.9814 278.3486 315.0679 276.042 313.9761 C
284.0601 312.5234 290.4321 311.1382 291.0596 310.105 c
311.623 275.835 327.6191 305.4976 327.6387 305.5342 c
330.377 310.6152 365.7891 315.3169 372.6953 317.748 c
384.2266 321.8027 395.9746 326.7085 405.5117 334.5342 c
432.7207 356.853 424.918 388.5396 415.6973 417.7871 c
f
0.574219 0.605469 0.90625 0.632813 k
313.9229 464.8384 m
321.4395 477.3706 333.0957 485.751 345.8457 490.04 C
322.6563 497.6152 302.4082 498.2324 285.041 494.7734 C
299.4321 490.5361 310.0215 484.3564 313.9229 464.8384 C
f
u
1 Ap
0 0 0 0 k
311.9502 424.1377 m
320.8633 399.834 308.3887 372.9077 284.0732 363.9902 c
259.7754 355.0811 232.8252 367.5557 223.9126 391.8608 c
215.0049 416.1641 227.5 443.1187 251.7964 452.0225 c
276.1187 460.9419 303.043 448.4429 311.9502 424.1377 c
f
/BBAccumRotation (0.351410) XT
*u
0 Ap
1 D
0.039216 0.003922 0.007843 0 k
251.7964 452.0225 m
227.5 443.1187 215.0049 416.1641 223.9126 391.8608 c
232.8252 367.5557 259.7754 355.0811 284.0732 363.9902 c
308.3887 372.9077 320.8633 399.834 311.9502 424.1377 c
303.043 448.4429 276.1187 460.9419 251.7964 452.0225 c
f
/BBAccumRotation (0.351410) XT
0 D
275.1953 379.835 m
257.125 373.21 236.4951 382.7734 229.8726 400.8262 c
223.248 418.9023 232.8154 439.5205 250.8789 446.144 c
268.9497 452.7676 289.5483 443.2104 296.1787 425.1348 c
302.7969 407.082 293.2598 386.457 275.1953 379.835 c
f
/BBAccumRotation (0.351410) XT
*U
/BBAccumRotation (0.351410) XT
*u
1 D
0.039216 0.003922 0.007843 0.05 k
251.7964 452.0225 m
227.5 443.1187 215.0049 416.1641 223.9126 391.8608 c
232.8252 367.5557 259.7754 355.0811 284.0732 363.9902 c
308.3887 372.9077 320.8633 399.834 311.9502 424.1377 c
303.043 448.4429 276.1187 460.9419 251.7964 452.0225 c
f
/BBAccumRotation (0.351410) XT
0 D
281.0361 371.7227 m
259.4229 363.7983 234.749 375.2095 226.8169 396.8418 c
218.8901 418.4639 230.3369 443.1294 251.9531 451.0518 c
273.5796 458.9824 298.2329 447.5547 306.1572 425.9336 c
314.0898 404.2974 302.6621 379.6504 281.0361 371.7227 c
f
/BBAccumRotation (0.351410) XT
*U
/BBAccumRotation (0.351410) XT
1 Ap
0 0 0 1 k
300.9531 430.6133 m
306.2344 416.2134 298.8413 400.2676 284.4448 394.9858 c
270.0537 389.7095 254.1021 397.0996 248.8188 411.5039 c
243.5435 425.8862 250.938 441.8462 265.3306 447.125 c
279.7271 452.4023 295.6797 445.002 300.9531 430.6133 c
f
/BBAccumRotation (0.351410) XT
0 Ap
0 0 0 0 k
294.623 440.1201 m
290.8164 446.0132 284.2402 449.5181 277.3335 449.4893 C
278.2168 434.1035 L
294.623 440.1201 L
f
/BBAccumRotation (0.351410) XT
U
u
1 Ap
408.1035 424.1377 m
417.0156 399.834 404.5449 372.9077 380.2285 363.9902 c
355.9297 355.0811 328.9805 367.5557 320.0703 391.8608 c
311.1611 416.1641 323.6563 443.1187 347.9531 452.0225 c
372.2734 460.9419 399.1973 448.4429 408.1035 424.1377 c
f
/BBAccumRotation (0.351410) XT
*u
0 Ap
1 D
0.039216 0.003922 0.007843 0 k
347.9531 452.0225 m
323.6563 443.1187 311.1611 416.1641 320.0703 391.8608 c
328.9805 367.5557 355.9297 355.0811 380.2285 363.9902 c
404.5449 372.9077 417.0156 399.834 408.1035 424.1377 c
399.1973 448.4429 372.2734 460.9419 347.9531 452.0225 c
f
/BBAccumRotation (0.351410) XT
0 D
371.3477 379.835 m
353.2832 373.21 332.6504 382.7734 326.0293 400.8262 c
319.4043 418.9023 328.9688 439.5205 347.0352 446.144 c
365.1035 452.7676 385.7031 443.2104 392.332 425.1348 c
398.9512 407.082 389.416 386.457 371.3477 379.835 c
f
/BBAccumRotation (0.351410) XT
*U
/BBAccumRotation (0.351410) XT
*u
1 D
0.039216 0.003922 0.007843 0.05 k
347.9531 452.0225 m
323.6563 443.1187 311.1611 416.1641 320.0703 391.8608 c
328.9805 367.5557 355.9297 355.0811 380.2285 363.9902 c
404.5449 372.9077 417.0156 399.834 408.1035 424.1377 c
399.1973 448.4429 372.2734 460.9419 347.9531 452.0225 c
f
/BBAccumRotation (0.351410) XT
0 D
377.1953 371.7227 m
355.5781 363.7983 330.9023 375.2095 322.9727 396.8418 c
315.0449 418.4639 326.4941 443.1294 348.1074 451.0518 c
369.7324 458.9824 394.3887 447.5547 402.3105 425.9336 c
410.2461 404.2974 398.8203 379.6504 377.1953 371.7227 c
f
/BBAccumRotation (0.351410) XT
*U
/BBAccumRotation (0.351410) XT
1 Ap
0 0 0 1 k
397.1094 430.6133 m
402.3887 416.2134 394.9961 400.2676 380.6016 394.9858 c
366.2109 389.7095 350.2578 397.0996 344.9727 411.5039 c
339.6992 425.8862 347.0918 441.8462 361.4844 447.125 c
375.8828 452.4023 391.834 445.002 397.1094 430.6133 c
f
/BBAccumRotation (0.351410) XT
0 Ap
0 0 0 0 k
390.7793 440.1201 m
386.9727 446.0132 380.3965 449.5181 373.4902 449.4893 C
374.373 434.1035 L
390.7793 440.1201 L
f
/BBAccumRotation (0.351410) XT
U
u
1 Ap
0 1 0.4 0 k
311.5869 369.8613 m
311.5869 364.6021 316.6602 360.3325 322.916 360.3325 c
329.1699 360.3325 334.2441 364.6021 334.2441 369.8613 c
334.2441 375.1216 329.1699 379.3906 322.916 379.3906 c
316.6602 379.3906 311.5869 375.1216 311.5869 369.8613 c
f
0 Ap
0 1 0.4 0.09 k
314.7764 376.4771 m
313.2324 370.8677 316.2285 363.8237 323.7754 363.8237 c
330.1973 363.8237 333.3223 368.9258 333.1621 373.9019 C
333.8457 372.6719 334.2441 371.3066 334.2441 369.8613 c
334.2441 364.6021 329.1699 360.3325 322.916 360.3325 c
316.6602 360.3325 311.5869 364.6021 311.5869 369.8613 c
311.5869 372.4312 312.8047 374.7622 314.7764 376.4771 C
f
1 Ap
0.023529 0.52549 0.015686 0 k
320.3652 374.0527 m
320.3652 373.0161 322.0449 372.1763 324.1172 372.1763 c
326.1875 372.1763 327.8652 373.0161 327.8652 374.0527 c
327.8652 375.0903 326.1875 375.9302 324.1172 375.9302 c
322.0449 375.9302 320.3652 375.0903 320.3652 374.0527 c
f
U
U
0 0 0 0.06 k
328.5889 124.418 m
15.1045 124.418 L
15.1045 175.415 L
328.5889 175.415 L
328.5889 124.418 L
f
0 Ap
0 0 0 0.09 k
179 130 m
168 130 157 132 146 134 C
103.1528 140.0254 56.7212 136.1934 15.1045 146.2031 C
15.1045 124.418 L
328.5889 124.418 L
328.5889 156.7139 L
288.2925 126.7012 228.2368 129.1211 179 130 c
f
u
1 Ap
0.35 0 1 0 k
600 0 m
0 0 L
0 53.9209 L
600 53.9209 L
600 0 L
f
0 Ap
0.4 0 1 0 k
393 16 m
367 18 341 12 315 10 c
303 9 290 14 277 13 c
222 8 169 13 115 15 c
92 16 68 10 45 12 C
30 14 15 10 1 15 C
0.668945 15.1328 0.333496 15.2725 0 15.4092 C
0 0 L
600 0 L
600 28.2119 L
598.3379 27.7979 596.6738 27.3906 595 27 c
528 10 461 10 393 16 c
f
U
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
